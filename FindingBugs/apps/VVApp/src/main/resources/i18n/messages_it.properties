EMPTY_LABEL=

# Exception Code Labels
INVALID_END_POINT=Il seguente EndPoint {0} non è disponibile. Controllare il nome dell'endpoint da tutte le chiamate EndPoint e riprovare.
INVALID_LEVEL=Il seguente livello {0} non è un valore di livello valido. Verificare il livello e l'endpoint supportati da tutte le chiamate EndPoint e riprovare.
UNAVAILABLE_LEVEL=Il livello {0} nell'endpoint {1} non è disponibile. Verificare il livello e l'endpoint supportati da tutte le chiamate EndPoint e riprovare.
INVALID_ACCESS=Il seguente metodo {0} non è accessibile. I motivi potrebbero essere una visibilità impropria o una definizione del metodo impropria. Si prega di controllare i log.
INVALID_AGRUMENTS=Il seguente metodo {0} non ha passato gli argomenti corretti. Si prega di controllare i log.
SYSTEM_ERROR=Errore di sistema. Controllare i log

# XSS based Injections
XSS_VULNERABILITY=Gli attacchi Cross-Site Scripting (XSS) sono un tipo di injection, in cui gli script dannosi vengono iniettati in \
siti Web altrimenti benigni e affidabili. Gli attacchi XSS si verificano quando un utente malintenzionato utilizza un'applicazione Web per inviare codice dannoso, \
 generalmente sotto forma di uno script lato browser, a un utente finale diverso. Difetti che consentono a questi attacchi di avere successo \
  sono abbastanza diffusi e si verificano ovunque un'applicazione Web utilizzi l'input di un utente all'interno dell'output \
  genera senza convalidarlo o codificarlo. <br/> <br/> Un utente malintenzionato può utilizzare XSS per inviare uno script dannoso a un utente ignaro. \
  Il browser dell'utente finale non ha modo di sapere che lo script non deve essere considerato attendibile e lo eseguirà. \
   Poiché ritiene che lo script provenga da una fonte attendibile, lo script dannoso può accedere a qualsiasi cookie, token di sessione, \
    o altre informazioni sensibili conservate dal browser e utilizzate con quel sito. Questi script possono persino riscrivere il contenuto \
     della pagina HTML. <br/><br/> Per ulteriori informazioni su XSS: <ol><li><a href="https://owasp.org/www-community/attacks/xss/" target="_blank">Owasp XSS </a> \
     <li><a href="https://www.google.com/about/appsecurity/learning/xss/" target="_blank">Sicurezza delle applicazioni Google</a></ol>

#### AttackVector description
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG=\"comment\" il valore del parametro query viene aggiunto direttamente al tag \"div\".
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG=\"comment\" il valore del parametro query viene aggiunto direttamente al tag \"div\" dopo aver sostituito i tag "<img" e "<input".
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_CASE_INSENSITIVE=\"comment\" il valore del parametro query viene aggiunto direttamente al tag \"div\" dopo aver sostituito i tag "<img" e "<input" senza distinzione tra maiuscole e minuscole.

PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_IF_TAGS_ARE_PRESENT_BEFORE_NULL_BYTE=\"comment\" il valore del parametro query viene aggiunto direttamente al tag \"div\" dopo aver sostituito i tag "<img" e "<input" se questi tag sono presenti prima del byte nullo.
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_CASE_INSENSITIVEIF_TAGS_ARE_PRESENT_BEFORE_NULL_BYTE=\"comment\" il valore del parametro query viene aggiunto direttamente al tag \"div\" dopo aver sostituito i tag "<img" e "<input" senza distinzione tra maiuscole e minuscole se questi tag sono presenti prima del byte nullo.
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_AFTER_HTML_ESCAPING_POST_CONTENT_BEFORE_NULL_BYTE=\"comment\" il valore del parametro query viene aggiunto direttamente al tag \"div\" dopo che l'HTML è sfuggito al contenuto presente prima che il byte nullo e l'altra parte vengano lasciati invariati.

     
## Image Tag Injections
XSS_IMAGE_TAG_INJECTION=$XSS_VULNERABILITY <br\> Questa vulnerabilità è correlata al tag immagine con attacchi XSS. Se...
#### Attack Vector Description
XSS_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG=I parametri URL vengono aggiunti direttamente nell'attributo src del tag immagine.
XSS_QUOTES_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=Le virgolette vengono aggiunte ai parametri URL e quindi aggiunte direttamente nell'attributo src del tag immagine
XSS_HTML_ESCAPE_ON_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG=L'escape dell'HTML viene eseguito sui parametri URL e quindi aggiunto direttamente nell'attributo src del tag immagine
XSS_HTML_ESCAPE_ON_DIRECT_INPUT_AND_REMOVAL_OF_VALUES_WITH_PARENTHESIS_SRC_ATTRIBUTE_IMG_TAG=L'escape dell'HTML insieme alla rimozione dei valori contenenti parentesi viene eseguito sui parametri URL e quindi aggiunto direttamente nell'attributo src del tag immagine.
XSS_QUOTES_AND_WITH_HTML_ESCAPE_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=L'escape dell'HTML viene eseguito sui parametri dell'URL e quindi inserito all'interno delle virgolette nell'attributo src del tag immagine.
XSS_HTML_ESCAPE_PLUS_FILTERING_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG_BUT_NULL_BYTE_VULNERABLE=I parametri URL sono sottoposti a escape HTML, convalidati rispetto alla whitelist di nomi di file e inseriti nell'attributo src del tag immagine, tuttavia il validatore per la convalida dei nomi di file è vulnerabile con l'iniezione di byte nulli.
XSS_QUOTES_AND_WITH_HTML_ESCAPE_PLUS_FILTERING_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=I parametri URL sono sottoposti a escape HTML, convalidati rispetto alla whitelist di nomi di file e inseriti all'interno di virgolette nell'attributo src dell'immagine

## Html Tag Injection
XSS_HTML_TAG_INJECTION=Attacco XSS basato su tag HTML
XSS_DIRECT_INPUT_DIV_TAG=Il tag HTML viene iniettato direttamente nel tag div.

### Attack vectors
XSS_DIRECT_INPUT_DIV_TAG=I parametri URL vengono aggiunti direttamente nel tag div.
XSS_DIRECT_INPUT_DIV_TAG_AFTER_REMOVING_VALUES_CONTAINING_ANCHOR_SCRIPT_AND_IMG_TAG=I parametri URL vengono aggiunti direttamente nel tag div se non dispongono di tag Script/Immagine e Anchor.
XSS_DIRECT_INPUT_DIV_TAG_AFTER_REMOVING_VALUES_CONTAINING_ANCHOR_SCRIPT_IMG_TAG_AND_ALERT_KEYWORD=I parametri URL vengono aggiunti direttamente nel tag div se non hanno tag Script/Image/Anchor e parole chiave Javascript e Alert.

# URL Redirection
## Location Header Injection
OPEN_REDIRECTION_VULNERABILITY_3XX_BASED=Le vulnerabilità di reindirizzamento aperto sorgono quando un'applicazione incorpora dati controllabili dall'utente \
nella destinazione di un reindirizzamento in modo non sicuro.<br/> Un utente malintenzionato può creare un URL all'interno dell'applicazione che \
provoca un reindirizzamento a un dominio esterno arbitrario. Questo comportamento può essere sfruttato per facilitare gli attacchi di phishing contro gli utenti dell'applicazione.<br/> \
La possibilità di utilizzare un URL dell'applicazione autentico, mirato al dominio corretto e con un certificato SSL valido (se viene utilizzato SSL), conferisce credibilità a \
l'attacco di phishing perché molti utenti, anche se verificano queste funzionalità, non si accorgeranno del successivo reindirizzamento a un dominio diverso. \
<br/><br/> <a href="https://www.w3.org/Protocols/rfc2616/rfc2616.html">RFC 2616 - "Hypertext Transfer Protocol - HTTP/1.1" target="_blank"< /a> definisce una varietà \
 di codici di stato 3xx che indurranno un browser a reindirizzare a una posizione specifica e questa implementazione si basa sui codici di stato 3xx <br/><br/>\
 Link importanti:<ol>\
 <li><a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse" target="_blank">WASC-38</a><br/></li >\
 <li><a href="https://cwe.mitre.org/data/definitions/601.html" target="_blank">CWE-601</a><br/></li>\
 <li><a href="https://portswigger.net/kb/issues/00500100_open-redirection-reflexed" target="_blank">Documentazione sulla vulnerabilità di Port Swigger</a><br/></li>\
 <li><a href="https://en.wikipedia.org/wiki/URL_redirection" target="_blank">Link Wiki per descrivere lo scopo del reindirizzamento URL</a></li>\
 <li><a href="https://github.com/payloadbox/open-redirect-payload-list" target="_blank">Apri l'elenco dei carichi utili di reindirizzamento</a></li>\
 <li><a href="https://appsec-labs.com/portal/case-study-open-redirect/" target="_blank">Aggiunta di dominio come case study di prefisso</a></li>\
 </ol>\
 Alcuni miti: <a href="https://security.stackexchange.com/questions/59517/are-url-shorteners-vulnerable-due-to-open-redirects" target="_blank">Gli URL shorteners \u201Cvulnerable\ u201D a causa di reindirizzamenti aperti?</a><br/>

OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER=\"returnTo\" il valore del parametro di query viene aggiunto direttamente all'intestazione \"Location\".
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_WWW_OR_DOMAIN_IS_SAME=\"returnTo\" il valore del parametro query viene aggiunto direttamente all'intestazione \"Location\" se non inizia con \"http\",\"www\" e \"https\" o se il dominio è uguale all'applicazione.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_WWW_//_OR_DOMAIN_IS_SAME=\"returnTo\" il valore del parametro query viene aggiunto direttamente all'intestazione \"Location\" se non inizia con \"http\",\"www\", \"https\" e "//" o se il dominio è uguale all'applicazione.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_WWW_HTTPS_//_NULL_BYTE_OR_DOMAIN_IS_SAME=\"returnTo\" il valore del parametro di query viene aggiunto direttamente all'intestazione \"Location\" se non inizia con \"http\",\"www\", \"https\", "//" e il byte nullo o il dominio sono uguali come l'applicazione.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_//_WWW_%_OR_DOMAIN_IS_SAME=\"returnTo\" il valore del parametro query viene aggiunto direttamente all'intestazione \"Location\" se non inizia con \"http\",\"www\", \"https\", "//" e un carattere inferiore al valore ascii 33 o il dominio è uguale all'applicazione.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADDED_TO_LOCATION_HEADER_BY_ADDING_DOMAIN_AS_PREFIX=\"returnTo\" il valore del parametro query viene aggiunto direttamente all'intestazione \"Posizione\" anteponendolo al nome di dominio delle applicazioni.


## Meta Tag based URL Redirection
OPEN_REDIRECTION_VULNERABILITY_META_TAG_BASED=Le vulnerabilità di reindirizzamento aperto sorgono quando un'applicazione incorpora dati controllabili dall'utente \
nella destinazione di un reindirizzamento in modo non sicuro.<br/> Un utente malintenzionato può creare un URL all'interno dell'applicazione che \
provoca un reindirizzamento a un dominio esterno arbitrario. Questo comportamento può essere sfruttato per facilitare gli attacchi di phishing contro gli utenti dell'applicazione.<br/> \
La possibilità di utilizzare un URL dell'applicazione autentico, mirato al dominio corretto e con un certificato SSL valido (se viene utilizzato SSL), conferisce credibilità a \
l'attacco di phishing perché molti utenti, anche se verificano queste funzionalità, non si accorgeranno del successivo reindirizzamento a un dominio diverso. \
<br/><br/> Un meta elemento HTML che specifica il tempo in secondi prima che il browser aggiorni la pagina. \
Fornire un URI alternativo consente all'elemento di essere utilizzato come reindirizzatore di URL a tempo. \
Ad esempio, nell'esempio seguente il browser reindirizzerà a example.com dopo 5 secondi: <br/> \
          &lt;meta http-equiv="aggiorna&quot; content=&quot;5;url=http://example.com&quot;&gt; <br/><br/>\
 Link importanti:<ol>\
 <li><a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse" target="_blank">WASC-38</a><br/></li >\
 <li><a href="https://cwe.mitre.org/data/definitions/601.html" target="_blank">CWE-601</a><br/></li>\
 <li><a href="https://portswigger.net/kb/issues/00500100_open-redirection-reflexed" target="_blank">Documentazione sulla vulnerabilità di Port Swigger</a><br/></li>\
 <li><a href="https://en.wikipedia.org/wiki/URL_redirection" target="_blank">Link Wiki per descrivere lo scopo del reindirizzamento URL</a></li>\
 <li><a href="https://github.com/payloadbox/open-redirect-payload-list" target="_blank">Apri l'elenco dei carichi utili di reindirizzamento</a></li>\
 <li><a href="https://appsec-labs.com/portal/case-study-open-redirect/" target="_blank">Aggiunta di dominio come case study di prefisso</a></li>\
 </ol>\
 Alcuni miti: <a href="https://security.stackexchange.com/questions/59517/are-url-shorteners-vulnerable-due-to-open-redirects" target="_blank">Gli URL shorteners \u201Cvulnerable\ u201D a causa di reindirizzamenti aperti?</a><br/>

URL_REDIRECTION_META_TAG_BASED_INJECTION=Reindirizzamento URL basato su meta tag.
URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_META_TAG=Il parametro URL viene aggiunto direttamente al Meta Tag.



# UNRESTRICTED_FILE_UPLOAD_VULNERABILITY
UNRESTRICTED_FILE_UPLOAD_VULNERABILITY=I file caricati rappresentano un rischio significativo per le applicazioni. Il primo passo in molti attacchi è inviare del codice al sistema da attaccare. Quindi l'attacco deve solo trovare un modo per eseguire il codice.\
<br/>Le conseguenze del caricamento illimitato dei file possono variare, tra cui l'acquisizione completa del sistema, un file system o un database sovraccarico, l'inoltro di attacchi a sistemi back-end, attacchi lato client o semplice defacement. Dipende da cosa fa l'applicazione con il file caricato e soprattutto da dove è archiviato.\
<br/><br/>\
Link importanti:<br/>\
<ol> <li> <a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload" target="_blank">Link Wiki Owasp</a> \
  <li> <a href="https://www.youtube.com/watch?v=CmF9sEyKZNo" target="_blank">Ebrahim Hegazy parla dei caricamenti di file illimitati</a> \
  <li> <a href="https://www.sans.org/blog/8-basic-rules-to-implement-secure-file-uploads/" target="_blank">Regole sans per implementare caricamenti di file sicuri </a> \
</ol>

#### Attack Vector Description
UNRESTRICTED_FILE_UPLOAD_NO_VALIDATION_FILE_NAME=Non vi è alcuna convalida sul nome del file caricato.
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_FILE_EXTENSION=Sono consentite tutte le estensioni di file tranne le estensioni .html.
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_NOT_HTM_FILE_EXTENSION=Sono consentite tutte le estensioni di file tranne le estensioni .html e .htm.
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_NOT_HTM_FILE_EXTENSION_CASE_INSENSITIVE=Tutte le estensioni di file sono consentite tranne le estensioni .html e .htm senza distinzione tra maiuscole e minuscole.
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_CONTAINS_.PNG_OR_.JPEG_CASE_INSENSITIVE=È consentito solo il nome del file se contiene .jpeg o .png senza distinzione tra maiuscole e minuscole.
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_ENDS_WITH_.PNG_OR_.JPEG_CASE_INSENSITIVE_AND_FILE_NAMES_CONSIDERED_BEFORE_NULL_BYTE=È consentito solo il nome del file se termina con .jpeg o .png senza distinzione tra maiuscole e minuscole ed è considerato solo prima dei byte nulli.
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_ENDS_WITH_.PNG_OR_.JPEG_CASE_INSENSITIVE=È consentito solo il nome del file se termina con .jpeg o .png senza distinzione tra maiuscole e minuscole.

# XXE Vulnerability
XXE_VULNERABILITY=Un attacco XML External Entity è un tipo di attacco contro un \
applicazione che analizza l'input XML. Questo attacco si verifica quando l'input XML contenente \
un riferimento a un'entità esterna viene elaborato da un parser XML configurato in modo debole. \
Questo attacco può portare alla divulgazione di dati riservati, denial of service, \
falsificazione della richiesta lato server, scansione delle porte dal punto di vista della macchina in cui \
viene individuato il parser e altri impatti sul sistema.\
<br/><br/>\
Link importanti:<br/>\
<ol> <li> <a href="https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing" target="_blank">Link Wiki Owasp</a> \
 <li> <a href="https://www.youtube.com/watch?v=DREgLWZqMWg" target="_blank">Tutorial video di HackHappy</a> \
 <li> <a href="https://medium.com/@onehackman/exploiting-xml-external-entity-xxe-injections-b0e3eac388f9" target="_blank">Articolo medio di OneHackMan</a>\
 <li> <a href="https://portswigger.net/web-security/xxe" target="_blank">Documentazione di Portswigger XXE</a> \
 <li> <a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.md1" target="_blank">Cheat sheet di Owasp Prevention</a>\
</ol>
#### Attack Vector Description
XXE_NO_VALIDATION=Non vi è alcuna convalida sull'XML passato nel corpo della richiesta.
XXE_DISABLE_GENERAL_ENTITY=Il parser è disabilitato dall'elaborazione di entità esterne generali.
XXE_DISABLE_GENERAL_AND_PARAMETER_ENTITY=Il parser è disabilitato dall'elaborazione di entità generali e parametriche.

# Path Traversal Attack
PATH_TRAVERSAL_VULNERABILITY=Un attraversamento di directory (o attraversamento di percorso) consiste nello sfruttare la convalida/sanificazione di sicurezza insufficiente dei nomi dei file di input forniti dall'utente, \
in modo tale che i caratteri che rappresentano "attraversa la directory principale" vengano passati alle API del file. \
<br/><br/>\
L'obiettivo di questo attacco è utilizzare un'applicazione interessata per ottenere l'accesso non autorizzato al file system. <br/><br/>\
Link importanti:<br/>\
<ol> <li> <a href="https://en.wikipedia.org/wiki/Directory_traversal_attack" target="_blank">Link Wiki</a> \
  <li> <a href="https://owasp.org/www-community/attacks/Path_Traversal" target="_blank">Link Wiki Owasp</a> \
</ol>
#### AttackVector description
PATH_TRAVERSAL_URL_PARAM_DIRECTLY_INJECTED=\"fileName\" il valore di query param viene aggiunto direttamente al percorso per leggere il file.
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" il valore di query param viene aggiunto direttamente se non contiene "..".
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_OR_%2F_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" il valore del parametro query viene aggiunto direttamente se non contiene ".." o "%2f" che è la codifica URL di "/".
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_OR_%2F_CASE_INSENSITIVE_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" il valore del parametro query viene aggiunto direttamente se non contiene ".." o "%2f" o "%2F" che è la codifica URL di "/".
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_WITH_OR_WITHOUT_URL_ENCODING_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" il valore di query param viene aggiunto direttamente se non contiene "..", si occupa anche della codifica dell'URL.

PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_DIRECTLY_INJECTED=\"fileName\" il valore di query param prima che Null Byte venga aggiunto direttamente al percorso per leggere il file.
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_PARENT_DIRECTORY_PATH_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" il valore di query param prima che Null Byte venga aggiunto direttamente se non contiene "../".
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" il valore del parametro query prima che il byte nullo venga aggiunto direttamente se non contiene "..".
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_OR_%2F_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" il valore del parametro query prima che il byte nullo venga aggiunto direttamente se non contiene ".." o "%2f" che è la codifica URL di "/".
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_OR_%2F_CASE_INSENSITIVE_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" il valore del parametro query prima che il byte nullo venga aggiunto direttamente se non contiene ".." o "%2f" o "%2F" che è la codifica URL di "/".
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_WITH_OR_WITHOUT_URL_ENCODING_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" il valore di query param prima che il byte nullo venga aggiunto direttamente se non contiene "..", si occupa anche della codifica dell'URL.


# Command Injection Attack
COMMAND_INJECTION_VULNERABILITY=L'iniezione di comandi è un attacco in cui l'obiettivo è l'esecuzione di comandi arbitrari sul sistema operativo host \
tramite un'applicazione vulnerabile. Gli attacchi di iniezione di comandi sono possibili quando un'applicazione passa dati forniti dall'utente non sicuri (moduli, cookie, intestazioni HTTP ecc.) \
a una shell di sistema. In questo attacco, i comandi del sistema operativo forniti dall'attaccante vengono generalmente eseguiti con i privilegi dell'applicazione vulnerabile. \
Gli attacchi di iniezione di comandi sono possibili in gran parte a causa di una convalida dell'input insufficiente. <br/><br/>\
Collegamenti importanti sulla vulnerabilità legata all'iniezione di comandi:<br/>\
<ol> <li> <a href="https://cwe.mitre.org/data/definitions/77.html" target="_blank">CWE-77</a> \
  <li> <a href="https://owasp.org/www-community/attacks/Command_Injection" target="_blank">Link Wiki Owasp</a> \
</ol>

#### Attack vectors
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED=\"ipaddress\" il valore del parametro query viene eseguito direttamente.
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_NOT_PRESENT=\"ipaddress\" il valore di query param viene eseguito direttamente se \";\", \"&\" o caratteri spazio non sono presenti in esso.
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_NOT_PRESENT=\"ipaddress\" il valore di query param viene eseguito direttamente se \";\", \"&\", \"%26\", \"%3B\" o spazi non sono presenti.
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_CASE_INSENSITIVE_NOT_PRESENT=\"ipaddress\" il valore di query param viene eseguito direttamente se \";\", \"&\", \"%26\", \"%3B\", \"%3b\" o spazi non sono presenti.
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_%7C_CASE_INSENSITIVE_NOT_PRESENT=\"ipaddress\" il valore del parametro query viene eseguito direttamente se \";\", \"&\", \"%26\", \"%3B\", \"%3b\", \"%7C\", \"% 7c\" o caratteri spazio non sono presenti in esso.


# Local File Injection
#URL_BASED_LFI_INJECTION=Attacco di inserimento file locale basato su URL.
#LFI_URL_PARAM_BASED_DIRECT_INJECTION=Il parametro URL \"fileName\" viene passato direttamente al file di inclusione.
#LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE=Il parametro URL \"fileName\" viene convalidato e passato per includere il file.

# Local File Injection with Null Byte
#URL_WITH_NULL_BYTE_BASED_LFI_INJECTION=URL con attacco di inserimento file locale basato su Null Byte Injection.
#LFI_URL_PARAM_AND_NULL_BYTE_BASED_DIRECT_INJECTION=Il parametro Url \"fileName\" viene passato direttamente al file di inclusione se contiene un byte nullo.
#LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE=Il parametro URL \"nomefile\" viene convalidato e passato per includere il file.

# Remote File Injection
URL_BASED_RFI_INJECTION=Attacco di inserimento file locale basato su URL.

# JWT Injection
JWT_INJECTION_VULNERABILITY=JSON Web Token (JWT) è uno standard aperto (RFC 7519) che definisce un modo compatto e autonomo per \
trasmissione sicura di informazioni tra le parti come oggetto JSON. Queste informazioni possono essere verificate e considerate attendibili perché \
è firmato digitalmente. Ci possono essere più cose che possono andare storte con l'implementazione di JWT e che possono influire sull'autenticazione o sull'autorizzazione \
dell'applicazione e risultano in una completa compromissione del sistema. <br/><br/> Link importanti su JWT : \
<ol> <li> <a href="https://en.wikipedia.org/wiki/JSON_Web_Token" target="_blank">Link Wiki</a> \
 <li> <a href="https://jwt.io/introduction/" target="_blank">Jwt.io</a> \
 </ol> Collegamenti importanti sulle implementazioni vulnerabili in JWT: \
 <ol> \ <li><a href="https://tools.ietf.org/html/draft-ietf-oauth-jwt-bcp-06" target="_blank">Il miglior token Web JSON \
      Pratiche attuali (documento eft)</a> \
   <li><a \
       href="https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html" target="_blank"> \
       Cheatsheet OWASP per le vulnerabilità nell'implementazione di JWT </a> \
   <li><a href="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries" target="_blank">Per \
       vulnerabilità lato server nelle implementazioni JWT</a> \
 </ol>

#### AttackVector description
JWT_URL_EXPOSING_SECURE_INFORMATION=La richiesta contiene il token JWT che è trapelato nell'URL. Ciò può violare il PCI e la maggior parte delle politiche di conformità dell'organizzazione.
COOKIE_CONTAINING_JWT_TOKEN_SECURITY_ATTRIBUTES_MISSING=Token JWT basato su cookie ma senza flag Secure/HttpOnly e anche senza prefissi cookie.
COOKIE_WITH_HTTPONLY_WITHOUT_SECURE_FLAG_BASED_JWT_VULNERABILITY=Token JWT basato su cookie ma con flag HttpOnly ma senza flag Secure e anche senza prefissi cookie.
COOKIE_BASED_LOW_KEY_STRENGTH_JWT_VULNERABILITY=Token JWT basato su cookie firmato utilizzando la vulnerabilità della chiave debole.
COOKIE_BASED_NULL_BYTE_JWT_VULNERABILITY=Validatore di token JWT vulnerabile a byte nullo basato su cookie.
COOKIE_BASED_NONE_ALGORITHM_JWT_VULNERABILITY=Convalida token JWT vulnerabile dell'algoritmo Nessuno basato su cookie.
COOKIE_BASED_KEY_CONFUSION_JWT_VULNERABILITY=Token JWT basato su cookie con vulnerabilità di confusione chiave.
COOKIE_BASED_FOR_JWK_HEADER_BASED_JWT_VULNERABILITY=Validatore di token JWT basato su cookie vulnerabile al campo JWK affidabile senza verificare se la chiave pubblica fornita è presente nel truststore o meno.
COOKIE_BASED_EMPTY_TOKEN_JWT_VULNERABILITY=Token JWT basato su cookie, vulnerabile agli attacchi di vulnerabilità dei token vuoti.



# SQL Injection Vulnerability
SQL_INJECTION_VULNERABILITY=Un attacco SQL injection consiste nell'inserimento o "iniezione" di una query SQL tramite i dati di input \
dal cliente all'applicazione. Un exploit SQL injection riuscito può leggere i dati sensibili dal database, modificare i dati del database (Inserisci/Aggiorna/Elimina), \
eseguire operazioni di amministrazione sul database (come lo spegnimento del DBMS), recuperare il contenuto di un determinato file presente \
sul file system DBMS e in alcuni casi impartire comandi al sistema operativo. Gli attacchi SQL injection sono un tipo di attacco injection, \
in cui i comandi SQL vengono inseriti nell'input del piano dati per effettuare l'esecuzione di comandi SQL predefiniti. <br\> \
Collegamenti importanti su SQLInjection: \
<ol> <li> <a href="https://en.wikipedia.org/wiki/SQL_injection" target="_blank">Link Wiki</a> \
 <li> <a href="https://owasp.org/www-community/attacks/SQL_Injection" target="_blank">Owasp SQLInjection</a> \
 <li> <a href="https://www.youtube.com/watch?v=WkHkryIoLD0" target="_blank">Joe McCray parla di SQLInjection</a>\
 <li> <a href="https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/" target="_blank">Cheat sheet di SQL Injection di netsparker</a>\
 </ol> <br/><br/>\ Collegamenti importanti sulle tecniche di prevenzione: \
 <ol> \ <li><a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html" target="_blank">Cheatsheet Prevenzione di Owasp</a> \
   <li><a \
       href="https://www.websec.ca/kb/sql_injection" target="_blank"> \
       Base di conoscenza di SQL injection </a> \
 </ol>

#### AttackVector description
ERROR_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=Il parametro della query viene aggiunto direttamente alla query SQL che causa un'eccezione \
in determinati scenari e quindi espone i dati dell'applicazione.
ERROR_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=Il parametro della query viene avvolto attorno a "'" e quindi aggiunto alla query SQL \
che causa un'eccezione in determinati scenari e quindi espone i dati dell'applicazione.
ERROR_SQL_INJECTION_URL_PARAM_REMOVES_SINGLE_QUOTE_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=La virgoletta singola viene rimossa dal parametro Query e quindi aggiunta a SQL Query \
eseguendo il wrapping con "'".
ERROR_SQL_INJECTION_URL_PARAM_APPENDED_TO_PARAMETERIZED_QUERY=Query param viene aggiunto direttamente alla query SQL e quindi viene formata una query parametrizzata. \
Questo per illustrare che l'uso corretto di PreparedStatement è importante.
 
UNION_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=Il parametro Query viene aggiunto direttamente alla Query e quindi la parola chiave \"Union\" \
può essere utilizzata per concatenare i risultati e estrarre i dati dell'applicazione.
UNION_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=Il parametro della query è avvolto attorno a "'" e quindi aggiunto alla query e quindi la parola chiave \"Union\" può essere utilizzata \
per concatenare i risultati ed estrarre i dati dell'applicazione.
UNION_SQL_INJECTION_URL_PARAM_REMOVES_SINGLE_QUOTE_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=La virgoletta singola viene rimossa dal parametro Query e quindi aggiunta a SQL Query avvolgendo "'"\
quindi la parola chiave \"Union\" può essere utilizzata per concatenare i risultati ed estrarre i dati dell'applicazione.
 
BLIND_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=Il parametro Query viene aggiunto direttamente alla Query, quindi Query può essere manipolata.
BLIND_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=Il parametro della query è avvolto attorno a "'" e quindi aggiunto alla query SQL, quindi è possibile manipolare la query.


#### SSRF Vulnerability
SSRF_VULNERABILITY=In un attacco Server-Side Request Forgery (SSRF), l'attaccante può abusare della funzionalità del server per \
leggere o aggiornare le risorse interne. L'attaccante può fornire o modificare un <strong>URL</strong> che il codice in esecuzione sul server leggerà \
o inviare dati a, e selezionando attentamente gli URL, <strong>l'attaccante potrebbe essere in grado di leggere il server </strong> \
configurazione come i metadati AWS, connettersi a servizi interni come database abilitati http o eseguire richieste di post \
verso servizi interni non destinati ad essere esposti. \
Collegamenti importanti su SSRF: \
<ol> \
  <li> <a href="https://en.wikipedia.org/wiki/Server-side_request_forgery" target="_blank">Link Wiki</a> \
  <li> <a href="https://owasp.org/www-community/attacks/Server_Side_Request_Forgery" target="_blank">Owasp SSRF</a> \
  <li> <a href="https://www.youtube.com/watch?v=AsPpxqIlTDU" target="_blank">SSRF (Server Side Request Forgery) di Musab Khan</a>\
  </ol>
SSRF_VULNERABILITY_URL_WITHOUT_CHECK=Nessuna convalida sull'URL fornito.
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL=file:// protocol non è consentito per l'URL fornito.
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL_AND_169.254.169.254=file:// protocol l'accesso al servizio di metadati non è concesso all'interno IP 169.254.169.254.
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL_AND_INTERNAL_METADATA_URL=file:// protocol l'accesso al servizio di metadati non è concesso.
SSRF_VULNERABILITY_URL_ONLY_IF_IN_THE_WHITELIST=È consentito solo l'URL autorizzato.
