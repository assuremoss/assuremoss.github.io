EMPTY_LABEL=

# अपवाद कोड लेबल
INVALID_END_POINT=निम्नलिखित {0} समापन बिंदु मौजूद नहीं है। कृपया allEndPoint कॉल से एंडपॉइंट नाम की पुष्टि करें और पुनः प्रयास करें।
INVALID_LEVEL=निम्नलिखित {0} स्तर मान्य स्तर मान नहीं हैं। कृपया allEndPoint कॉल से समर्थित स्तर और समापन बिंदु की जाँच करें और पुनः प्रयास करें।
UNAVAILABLE_LEVEL=निम्नलिखित {1} समापन बिंदु में {0} स्तर मौजूद नहीं है। कृपया allEndPoint कॉल से समर्थित स्तर और समापन बिंदु की जाँच करें और पुनः प्रयास करें।
INVALID_ACCESS=निम्नलिखित {0} विधियाँ प्राप्त करने में असमर्थ। संभावित कारण अनुचित दृश्यता या विधि परिभाषाएँ हैं। कृपया अभिलेखों की जांच करें।
INVALID_AGRUMENTS=निम्नलिखित {0} विधियों में गलत पैरामीटर समूह हैं। कृपया अभिलेखों की जांच करें।
SYSTEM_ERROR=सिस्टम त्रुटि. कृपया अभिलेखों की जांच करें।

# XSS आधारित इंजेक्शन
BILITY=क्रॉस-साइट स्क्रिप्टिंग (XSS) हमला एक इंजेक्शन हमला है, वह सौम्य भरोसेमंद होगा \
साइट दुर्भावनापूर्ण कोड इंजेक्ट करती है। XSS हमले तब होते हैं जब कोई हमलावर किसी वेब प्रोग्राम के माध्यम से दुर्भावनापूर्ण कोड भेजता है, \
आमतौर पर, ब्राउज़र को ब्राउज़र साइड पर कोड के रूप में विभिन्न अंतिम उपयोगकर्ताओं के सामने प्रस्तुत किया जाता है। कमजोरियाँ जो इन हमलों को सफल होने देती हैं \
अक्सर, किसी भी समय कोई वेब प्रोग्राम उपयोगकर्ता द्वारा दर्ज किया गया डेटा आउटपुट करता है। \
लेकिन यह ऑडिटिंग या एन्क्रिप्शन के बिना होता है। <br/> <br/>एक हमलावर बिना सोचे-समझे उपयोगकर्ताओं को दुर्भावनापूर्ण कोड पहुंचाने के लिए XSS का उपयोग कर सकता है। \
अंतिम उपयोगकर्ता के ब्राउज़र के लिए यह जानने और उसे निष्पादित करने का कोई तरीका नहीं है कि यह कोड अविश्वसनीय है। \
क्योंकि उसे लगता है कि कोड एक विश्वसनीय स्रोत से है, यह दुर्भावनापूर्ण कोड किसी भी कुकीज़, सत्र टोकन तक पहुंच सकता है। \
या इस विशेष वेबसाइट पर उपयोग के लिए ब्राउज़र द्वारा रखी गई अन्य संवेदनशील जानकारी। ये कोड \ को ओवरराइड भी कर सकते हैं \
इस HTML पृष्ठ की सामग्री<br/><br/> _blank">Owasp XSS</a> \
XSS_VULNERA <li><a href='https://www.google.com/about/appsecurity/learning/xss/' target='_blank'>Google एप्लिकेशन सुरक्षा</a></ol>

#### अटैकवेक्टर विवरण
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG=\"comment\" क्वेरी पैरामीटर मान सीधे \"div\" टैग में जोड़ा जाता है।
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG=\"comment\" क्वेरी पैरामीटर मान "<img" और "<input" टैग को बदलने के बाद सीधे \"div\" टैग में जोड़ा जाता है।
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_CASE_INSENSITIVE=\"comment\" क्वेरी पैरामीटर मान केस-असंवेदनशील "<img" और "<input" टैग को बदलने के बाद सीधे \"div\" टैग पर जोड़ा जाता है।

PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_IF_TAGS_ARE_PRESENT_BEFORE_NULL_BYTE=\"comment\" क्वेरी पैरामीटर मान "<img" और "<input" टैग को बदलने के बाद सीधे \"div\" टैग पर जोड़ा जाता है, यदि वे टैग शून्य से पहले मौजूद हैं चरित्र.
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_CASE_INSENSITIVEIF_TAGS_ARE_PRESENT_BEFORE_NULL_BYTE=\"टिप्पणी\" केस-असंवेदनशील "<img" और "<input" टैग को बदलने के बाद क्वेरी पैरामीटर मान सीधे \"div\ में जोड़ा जाता है "टैग, यदि वे टैग शून्य वर्ण से पहले मौजूद हैं।
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_AFTER_HTML_ESCAPING_POST_CONTENT_BEFORE_NULL_BYTE=\"comment\" HTML एस्केप नल कैरेक्टर से पहले मौजूद क्वेरी पैरामीटर मान की सामग्री को सीधे \"div\" टैग में जोड़ा जाता है, बाकी को अपरिवर्तित छोड़ दिया जाता है।

     
## छवि टैग इंजेक्शन
XSS_IMAGE_TAG_INJECTION=$XSS_VULNERABILITY <br\> यह भेद्यता img टैग पर XSS हमलों से संबंधित है।
#### आक्रमण वेक्टर विवरण
XSS_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG=Url पैरामीटर सीधे img टैग के src विशेषता में जोड़ा जाता है।
XSS_QUOTES_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=उद्धृत सामग्री को Url पैरामीटर में जोड़ा जाता है और फिर सीधे img टैग के src विशेषता में जोड़ा जाता है।
XSS_HTML_ESCAPE_ON_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG= यूआरएल पैरामीटर में एक HTML एस्केप है और इसे सीधे img टैग के src विशेषता में जोड़ा जाता है।
XSS_HTML_ESCAPE_ON_DIRECT_INPUT_AND_REMOVAL_OF_VALUES_WITH_PARENTHESIS_SRC_ATTRIBUTE_IMG_TAG= कोष्ठक हटाकर यूआरएल पैरामीटर और मान पर HTML एस्केप और img टैग के src विशेषता में सीधे जोड़ा गया।
XSS_QUOTES_AND_WITH_HTML_ESCAPE_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=HTML एस्केप के बाद यूआरएल पैरामीटर को उद्धरण चिह्नों में डाला जाता है और img टैग के src विशेषता में डाला जाता है।
XSS_HTML_ESCAPE_PLUS_FILTERING_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG_BUT_NULL_BYTE_VULNERABLE=Url पैरामीटर में HTML एस्केप है, और फ़ाइल श्वेतसूची में सत्यापित होने के बाद img टैग के src विशेषता में एम्बेड किया गया है, लेकिन फ़ाइल सत्यापन पक्ष में शून्य वर्ण इंजेक्शन की भेद्यता है।
XSS_QUOTES_AND_WITH_HTML_ESCAPE_PLUS_FILTERING_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=Url पैरामीटर फ़ाइल श्वेतसूची में मान्य होने और img टैग की src विशेषता में डालने के बाद HTML बच गया और उद्धरण चिह्नों में डाला गया प्रतीत होता है।

## एचटीएमएल टैग इंजेक्शन
XSS_HTML_TAG_INJECTION=Html टैग से XSS आक्रमण प्राप्त हुआ।
XSS_DIRECT_INPUT_DIV_TAG=Html टैग सीधे div टैग के अंदर एम्बेडेड होते हैं।

### हमला वैक्टर
XSS_DIRECT_INPUT_DIV_TAG=Url पैरामीटर सीधे div टैग में जोड़ा जाता है।
XSS_DIRECT_INPUT_DIV_TAG_AFTER_REMOVING_VALUES_CONTAINING_ANCHOR_SCRIPT_AND_IMG_TAG=एनकोडिंग या <img> और एंकर टैग के बिना यूआरएल पैरामीटर सीधे div टैग में जोड़े जाते हैं।
XSS_DIRECT_INPUT_DIV_TAG_AFTER_REMOVING_VALUES_CONTAINING_ANCHOR_SCRIPT_IMG_TAG_AND_ALERT_KEYWORD=एनकोडिंग या छवियों के बिना यूआरएल पैरामीटर, एंकर टैग, जावास्क्रिप्ट, अलर्ट कीवर्ड सीधे div टैग में जोड़े जाते हैं।

#यूआरएल पुनर्निर्देशन
## स्थान शीर्षलेख इंजेक्शन
OPEN_REDIRECTION_VULNERABILITY_3XX_BASED=जब किसी प्रोग्राम में पुनर्निर्देशन ऑब्जेक्ट में असुरक्षित तरीके से उपयोगकर्ता-नियंत्रण योग्य डेटा होता है \
एक खुली पुनर्निर्देशन भेद्यता होगी<br/>एक हमलावर प्रोग्राम में एक यूआरएल \ बना सकता है
किसी बाहरी डोमेन पर रीडायरेक्ट करने के लिए। इस व्यवहार का उपयोग प्रोग्राम के उपयोगकर्ताओं के विरुद्ध फ़िशिंग हमलों को सुविधाजनक बनाने के लिए किया जा सकता है। <br/>\
वास्तविक प्रोग्राम यूआरएल और वैध एसएसएल प्रमाणपत्र (यदि एसएसएल का उपयोग किया जाता है) के साथ सही डोमेन को लक्षित करने की क्षमता, विश्वसनीयता को उधार लेती है।
फ़िशिंग हमला, क्योंकि कई उपयोगकर्ता, भले ही उन्होंने इन कार्यों को सत्यापित कर लिया हो, किसी भिन्न डोमेन पर बाद के पुनर्निर्देशन को नोटिस नहीं करेंगे। \
<br/><br/> <a href='https://www.w3.org/Protocols/rfc2616/rfc2616.html'>RFC 2616 - "हाइपरटेक्स्ट ट्रांसफर प्रोटोकॉल - HTTP/1.1" target='_blank'< /a> \ तक परिभाषित करता है
3xx विभिन्न स्थिति कोड जो ब्राउज़र को एक विशिष्ट क्षेत्र पर रीडायरेक्ट करने का कारण बनते हैं, और यह निष्पादन योग्य 3xx एकाधिक स्थिति कोड पर आधारित है<br/><br/>\
महत्वपूर्ण लिंक: <ol>\
  <li><a href='http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse' target=”_blank'>WASC-38</a><br/></li >\
  <li><a href='https://cwe.mitre.org/data/definitions/601.html' target=”_blank'>CWE-601</a><br/></li>\
  <li><a href='https://portswigger.net/kb/issues/00500100_open-redirection-reflected' target=”_blank'>पोर्ट स्विगर की भेद्यता दस्तावेज़</a><br/></li>\
  <li><a href='https://en.wikipedia.org/wiki/URL_redirection' target='_blank'>URL पुनर्निर्देशन के उद्देश्य का वर्णन करने के लिए विकी लिंक</a></li>\
  <li><a href='https://github.com/payloadbox/open-redirect-payload-list' target='_blank'>रीडायरेक्शन पेलोड सूची खोलें</a></li>\
  <li><a href='https://appsec-labs.com/portal/case-study-open-redirect/' target='_blank'>डोमेन को उपसर्ग केस स्टडी के रूप में जोड़ना</a></li>\
  </ol>\
  मिथक: <a href='https://security.stackexchange.com/questions/59517/are-url-shorteners-volnerable-due-to-open-redirects' target=”_blank'>क्या URL शॉर्टनर \u201Cअसुरक्षित\ u201D खुले रीडायरेक्ट के कारण?</a><br/>

  OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER=\"returnTo\" क्वेरी पैरामीटर मान सीधे \"स्थान\" हेडर में जोड़ा जाता है।
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_WWW_OR_DOMAIN_IS_SAME=\"returnTo\" यदि क्वेरी पैरामीटर मान की शुरुआत \"http\",\"www\" और \"https\" नहीं है, या डोमेन प्रोग्राम के समान है, तो इसे सीधे जोड़ा जाएगा हेडर पर \"स्थान\" पर.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_WWW_//_OR_DOMAIN_IS_SAME=\"returnTo\" यदि क्वेरी पैरामीटर मान की शुरुआत \"http\",\"www\" और \"https\", "//" नहीं है और डोमेन समान है प्रोग्राम, इसे सीधे \"स्थान\" शीर्षलेख में जोड़ा जाएगा।
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_WWW_HTTPS_//_NULL_BYTE_OR_DOMAIN_IS_SAME=\"returnTo\" यदि क्वेरी पैरामीटर मान की शुरुआत \"http\", "www\" नहीं है, उसके बाद \"https\", "//" और शून्य वर्ण या डोमेन उसके बाद आता है प्रोग्राम में वही शब्द सीधे \"स्थान\" शीर्षक में जोड़े जाएंगे।
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_//_WWW_%_OR_DOMAIN_IS_SAME=\"returnTo\" यदि क्वेरी पैरामीटर मान की शुरुआत \"http\",\"www\" और "https\", "//" नहीं है और अक्षर ascii मान से कम हैं 33, या डोमेन को सीधे \"स्थान\" हेडर में जोड़ा जाता है यदि यह प्रोग्राम के समान है।
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADDED_TO_LOCATION_HEADER_BY_ADDING_DOMAIN_AS_PREFIX=\"returnTo\" क्वेरी पैरामीटर मान सीधे प्रीपेंडेड प्रोग्राम डोमेन नाम के रूप में \"स्थान\" हेडर में जोड़ा जाएगा।


## मेटा टैग आधारित यूआरएल पुनर्निर्देशन
OPEN_REDIRECTION_VULNERABILITY_META_TAG_BASED=जब एप्लिकेशन \ को नियंत्रित करने के लिए असुरक्षित तरीकों का उपयोग करता है \
एक खुली पुनर्निर्देशन भेद्यता तब होती है जब डेटा को पुनर्निर्देशन गंतव्य के साथ जोड़ा जाता है<br/>एक हमलावर एप्लिकेशन के भीतर एक यूआरएल बना सकता है। \
फिर एक मनमाना बाहरी डोमेन पर रीडायरेक्ट करें। इस व्यवहार का उपयोग एप्लिकेशन के उपयोगकर्ताओं पर फ़िशिंग हमले करने के लिए किया जा सकता है। <br/> \
वास्तविक एप्लिकेशन यूआरएल का उपयोग करना, वैध एसएसएल प्रमाणपत्र (यदि एसएसएल का उपयोग किया जाता है) के साथ सही डोमेन को लक्षित करना, उधार देगा \
फ़िशिंग हमले अधिक विश्वसनीय होते हैं क्योंकि कई उपयोगकर्ता, इन कार्यों को सत्यापित करने के बाद भी, किसी भिन्न डोमेन पर बाद के पुनर्निर्देशन पर ध्यान नहीं देते हैं। \
<br/><br/> एक HTML मेटा तत्व ब्राउज़र को पेज को सेकंडों में अपडेट करने के लिए कहता है। \
एक वैकल्पिक यूआरआई की आपूर्ति इस तत्व को एक समयबद्ध यूआरएल पुनर्निर्देशक के रूप में उपयोग करने की अनुमति देती है। \
उदाहरण के लिए, नीचे दिए गए उदाहरण में, ब्राउज़र पांच सेकंड के भीतर example.com पर रीडायरेक्ट करता है:<br/> \
           &lt;meta http-equiv=&quot;रिफ्रेश&quot; content=&quot;5;url=http://example.com&quot;&gt; <br/><br/>\
महत्वपूर्ण लिंक: <ol>\
  <li><a href='http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse' target=”_blank'>WASC-38</a><br/></li >\
  <li><a href='https://cwe.mitre.org/data/definitions/601.html' target=”_blank'>CWE-601</a><br/></li>\
  <li><a href='https://portswigger.net/kb/issues/00500100_open-redirection-reflected' target=”_blank'>पोर्ट स्विगर की भेद्यता दस्तावेज़</a><br/></li>\
  <li><a href='https://en.wikipedia.org/wiki/URL_redirection' target='_blank'>URL पुनर्निर्देशन के उद्देश्य का वर्णन करने के लिए विकी लिंक</a></li>\
  <li><a href='https://github.com/payloadbox/open-redirect-payload-list' target='_blank'>रीडायरेक्शन पेलोड सूची खोलें</a></li>\
  <li><a href='https://appsec-labs.com/portal/case-study-open-redirect/' target='_blank'>डोमेन को उपसर्ग केस स्टडी के रूप में जोड़ना</a></li>\
  </ol>\
  मिथक: <a href='https://security.stackexchange.com/questions/59517/are-url-shorteners-volnerable-due-to-open-redirects' target=”_blank'>क्या URL शॉर्टनर \u201Cअसुरक्षित\ u201D खुले रीडायरेक्ट के कारण?</a><br/>


URL_REDIRECTION_META_TAG_BASED_INJECTION=मेटा ​​टैग व्युत्पन्न URL पुनर्निर्देशन।
URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_META_TAG=Url पैरामीटर मान सीधे मेटा टैग में जोड़ा जाता है।



#अप्रतिबंधित_फ़ाइल_अपलोड_भेद्यता
UNRESTRICTED_FILE_UPLOAD_VULNERABILITY=अपलोड की गई फ़ाइल एप्लिकेशन के लिए महत्वपूर्ण जोखिम पैदा करती है। कई हमलों में पहला कदम हमला किए जाने वाले सिस्टम में कोड प्राप्त करना है। फिर उन्हें बस कोड निष्पादित करने का एक तरीका ढूंढना होगा। \
<br/>असीमित फ़ाइलें अपलोड करने से अलग-अलग परिणाम हो सकते हैं, जिनमें पूर्ण सिस्टम अधिग्रहण, ओवरलोडेड फ़ाइल सिस्टम या डेटाबेस, बैक-एंड सिस्टम पर हमलों को अग्रेषित करना, क्लाइंट-साइड हमले या साधारण भ्रष्टाचार शामिल हैं। यह आमतौर पर इस बात पर निर्भर करता है कि एप्लिकेशन अपलोड की गई फ़ाइल को कैसे संभालता है, खासकर जहां इसे संग्रहीत किया जाएगा। \
<br/><br/>\
महत्वपूर्ण लिंक:<br/>\
<ol> <li> <a href='https://owasp.org/www-community/volnerability/Unrestricted_File_Upload' target='_blank'>Owasp Wiki Link</a> \
  <li> <a href='https://www.youtube.com/watch?v=CmF9sEyKZNo' target=”_blank'>इब्राहिम हेगाज़ी ने अप्रतिबंधित फ़ाइल अपलोड पर बात की</a> \
  <li> <a href='https://www.sans.org/blog/8-basic-rules-to-implement-secure-file-uploads/' target='_blank'>सुरक्षित फ़ाइल अपलोड लागू करने के लिए सैन्स नियम </ए> \
</ol>

#### आक्रमण वेक्टर विवरण
UNRESTRICTED_FILE_UPLOAD_NO_VALIDATION_FILE_NAME=अपलोड की गई फ़ाइल का फ़ाइल नाम मान्य नहीं है।
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_FILE_EXTENSION=.html के अलावा अन्य फ़ाइल एक्सटेंशन की अनुमति है।
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_NOT_HTM_FILE_EXTENSION=.html और .htm के अलावा अन्य फ़ाइल एक्सटेंशन की अनुमति है।
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_NOT_HTM_FILE_EXTENSION_CASE_INSENSITIVE=केस असंवेदनशील .html और .htm के अलावा अन्य फ़ाइल नाम एक्सटेंशन की अनुमति है।
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_CONTAINS_.PNG_OR_.JPEG_CASE_INSENSITIVE=केवल केस असंवेदनशील .jpeg या .png वाले फ़ाइल नामों की अनुमति है।
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_ENDS_WITH_.PNG_OR_.JPEG_CASE_INSENSITIVE_AND_FILE_NAMES_CONSIDERED_BEFORE_NULL_BYTE=केवल केस-असंवेदनशील .jpeg या .png में समाप्त होने वाले और शून्य वर्ण से पहले माने जाने वाले फ़ाइल नामों की अनुमति है।
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_ENDS_WITH_.PNG_OR_.JPEG_CASE_INSENSITIVE=केवल केस-असंवेदनशील .jpeg या .png में समाप्त होने वाले फ़ाइल नामों की अनुमति है।

#XXE भेद्यता
XXE_VULNERABILITY= XML बाहरी इकाई हमला \ के लिए एक विधि है
XML इनपुट को पार्स करने वाले अनुप्रयोगों के विरुद्ध हमले। \ को संभालने के लिए कमज़ोर XML पार्सर्स सेट करते समय \
यह हमला एक XML इनपुट के साथ होता है जिसमें बाहरी संस्थाओं का संदर्भ देने वाली सामग्री होती है। \
इस हमले के परिणामस्वरूप गोपनीय डेटा का रिसाव, सेवा से इनकार, \
नकली सर्वर-साइड अनुरोध, मशीन के परिप्रेक्ष्य से पोर्ट स्कैन जहां विश्लेषक स्थित है, \
और अन्य सिस्टम प्रभाव। \
<br/><br/>\
महत्वपूर्ण लिंक:<br/>\
<ol> <li> <a href='https://owasp.org/www-community/volnerability/XML_External_Entity_(XXE)_Processing' target='_blank'>Owasp Wiki Link</a> \
  <li> <a href='https://www.youtube.com/watch?v=DREgLWZqMWg' target='_blank'>HackHappy का वीडियो ट्यूटोरियल</a> \
  <li> <a href='https://medium.com/@onehackman/exploiting-xml-external-entity-xxe-injections-b0e3eac388f9' target='_blank'>OneHackMan द्वारा मध्यम लेख</a>\
  <li> <a href='https://portswigger.net/web-security/xxe' target='_blank'>पोर्ट्सविगर XXE दस्तावेज़</a> \
  <li> <a href='https://github.com/OWASP/CheatSheetSeries/blob/master/cheatSheets/XML_External_Entity_Prevention_Cheat_Sheet.md1' target='_blank'>ओवास्प प्रिवेंशन चीट शीट</a>\
</ol>
#### आक्रमण वेक्टर विवरण
XXE_NO_VALIDATION=अनुरोध में डाले गए XML के लिए कोई सत्यापन नहीं है।
XXE_DISABLE_GENERAL_ENTITY=पार्सर सामान्य बाहरी इकाइयों को संभाल नहीं सकता है।
XXE_DISABLE_GENERAL_AND_PARAMETER_ENTITY=पार्सर सामान्य और पैरामीटर इकाइयों को संभाल नहीं सकता है।

# पथ ट्रैवर्सल आक्रमण
PATH_TRAVERSAL_VULNERABILITY=उपयोगकर्ता द्वारा प्रदत्त इनपुट फ़ाइल नामों के अपर्याप्त सत्यापन/फ़िल्टरिंग का उपयोग करके निर्देशिका रोमिंग (या पथ रोमिंग), \
उदाहरण के लिए, "होम डायरेक्टरी पर नेविगेट करें" का प्रतिनिधित्व करने वाले शब्द फ़ाइल एपीआई में बनाए गए हैं। \
<br/><br/>\
इस हमले का लक्ष्य फ़ाइल सिस्टम तक अनधिकृत पहुंच प्राप्त करने के लिए प्रभावित एप्लिकेशन का उपयोग करना है। <br/><br/>\
महत्वपूर्ण लिंक:<br/>\
<ol> <li> <a href='https://en.wikipedia.org/wiki/Directory_traversal_attack' target='_blank'>विकी लिंक</a> \
  <li> <a href='https://owasp.org/www-community/attacks/Path_Traversal' target='_blank'>ओवास्प विकी लिंक</a> \
</ol>

#### अटैकवेक्टर विवरण
PATH_TRAVERSAL_URL_PARAM_DIRECTLY_INJECTED=\"fileName\" क्वेरी पैरामीटर मान सीधे उस पथ से जोड़ा जाता है जहां फ़ाइल पढ़ी जाती है।
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" यदि क्वेरी पैरामीटर मान में ".." नहीं है, तो इसे सीधे अंत में जोड़ा जाएगा।
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_OR_%2F_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" क्वेरी पैरामीटर मान सीधे जोड़ा जाएगा यदि इसमें ".." या "%2f" ("/" URL का एन्कोडिंग) शामिल नहीं है।
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_OR_%2F_CASE_INSENSITIVE_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" यदि क्वेरी पैरामीटर मान में ".." या "%2f", या "%2F" (URL का "/" एन्कोडिंग) नहीं है, तो इसे सीधे अंत में जोड़ा जाएगा।
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_WITH_OR_WITHOUT_URL_ENCODING_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" यदि क्वेरी पैरामीटर मान में ".." नहीं है, तो इसे सीधे अंत में जोड़ दिया जाएगा, जो URL एन्कोडिंग को भी संभालता है।

PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_DIRECTLY_INJECTED=\"fileName\" फ़ाइल को पढ़ने के लिए शून्य वर्ण से पहले क्वेरी पैरामीटर का मान सीधे पथ के अंत में जोड़ा जाता है
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_PARENT_DIRECTORY_PATH_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" शून्य वर्ण से पहले क्वेरी पैरामीटर का मान सीधे अंत में जोड़ा जाएगा यदि इसमें "../" शामिल नहीं है।
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" यदि शून्य वर्ण से पहले क्वेरी पैरामीटर के मान में ".." नहीं है, तो इसे सीधे अंत में जोड़ा जाएगा।
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_OR_%2F_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" यदि शून्य वर्ण से पहले क्वेरी पैरामीटर के मान में ".." या "%2f" (URL का "/" एन्कोडिंग) नहीं है, तो इसे सीधे अंत में जोड़ा जाएगा।
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_OR_%2F_CASE_INSENSITIVE_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" यदि शून्य वर्ण से पहले क्वेरी पैरामीटर के मान में "..", "%2f", या "%2F" (URL की "/" एन्कोडिंग) शामिल नहीं है, तो इसे जोड़ा जाएगा सीधे पूंछ सेवा.
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_WITH_OR_WITHOUT_URL_ENCODING_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" यदि शून्य वर्ण से पहले क्वेरी पैरामीटर के मान में ".." नहीं है, तो इसे सीधे अंत में जोड़ा जाएगा, जो URL एन्कोडिंग को भी संभालता है।

# कमांड इंजेक्शन अटैक
COMMAND_INJECTION_VULNERABILITY=कमांड इंजेक्शन होस्ट ऑपरेटिंग सिस्टम पर एक कमजोर एप्लिकेशन के माध्यम से किया गया था\
हमले के उद्देश्य के लिए निर्देश. कमांड इंजेक्शन अटैक किसी एप्लिकेशन में उपयोगकर्ता द्वारा प्रदत्त डेटा (फॉर्म, कुकीज़, HTTP हेडर इत्यादि) को असुरक्षित करने की अनुमति देता है। \
सिस्टम शेल से गुजरते समय होता है। इस हमले में, हमलावर द्वारा प्रदत्त ऑपरेटिंग सिस्टम कमांड को आमतौर पर कमजोर एप्लिकेशन के विशेषाधिकारों के तहत निष्पादित किया जाता है। \
कमांड इनपुट हमले अधिकतर तब होते हैं जब इनपुट डेटा सत्यापन अपर्याप्त होता है। <br/><br/>\
कमांड इनपुट कमजोरियों के लिए महत्वपूर्ण लिंक:<br/>\
<ol> <li> <a href='https://cwe.mitre.org/data/definitions/77.html' target='_blank'>CWE-77</a> \
  <li> <a href='https://owasp.org/www-community/attacks/Command_Injection' target='_blank'>ओवास्प विकी लिंक</a> \
</ol>

#### आक्रमण सदिश
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED=\"ipaddress\" क्वेरी पैरामीटर मान सीधे निष्पादित किया जाता है।
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_NOT_PRESENT=\"ipaddress\" यदि क्वेरी पैरामीटर मान में \";\", \"&\" या रिक्त प्रतीक शामिल नहीं हैं, तो इसे सीधे निष्पादित किया जाएगा।
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_NOT_PRESENT=\"ipaddress\" यदि क्वेरी पैरामीटर मान में \";\", \"&\", \"%26\", \"%3B\" या रिक्त प्रतीक नहीं हैं, तो यह होगा सीधे लागू किया जाए.
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_CASE_INSENSITIVE_NOT_PRESENT=\"ipaddress\" यदि क्वेरी पैरामीटर मान में \";\", \"&\", \"%26\", \"%3B\", \"%3b\ शामिल नहीं है "या रिक्त प्रतीकों वाले शब्दों को सीधे निष्पादित किया जाएगा।
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_%7C_CASE_INSENSITIVE_NOT_PRESENT=\"ipaddress\" यदि क्वेरी पैरामीटर मान में \";\", \"&\", \"%26\", \"%3B\", \" % नहीं है 3b\ ", \"%7C\", "%7c\" या रिक्त प्रतीकों को सीधे निष्पादित किया जाएगा।


# स्थानीय फ़ाइल इंजेक्शन
#URL_BASED_LFI_INJECTION=यूआरएल व्युत्पन्न स्थानीय फ़ाइल इंजेक्शन हमला।
#LFI_URL_PARAM_BASED_DIRECT_INJECTION=यूआरएल पैरामीटर \"फ़ाइलनाम\" फ़ाइलों को शामिल करने के लिए सीधे पास किया जाता है।
#LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE=Url पैरामीटर \"fileName\" को मान्य किया गया है और फ़ाइल को शामिल करने के लिए पास किया गया है।

# नल बाइट के साथ स्थानीय फ़ाइल इंजेक्शन
#URL_WITH_NULL_BYTE_BASED_LFI_INJECTION=नल कैरेक्टर इंजेक्शन द्वारा प्राप्त स्थानीय फ़ाइल इंजेक्शन हमले के साथ यूआरएल।
#LFI_URL_PARAM_AND_NULL_BYTE_BASED_DIRECT_INJECTION=Url पैरामीटर \"fileName\" को सीधे फ़ाइल में शामिल करने के लिए पास किया जाएगा यदि इसमें शून्य वर्ण हैं।
#LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE=Url पैरामीटर \"fileName\" को मान्य किया गया है और फ़ाइल को शामिल करने के लिए पास किया गया है।

# रिमोट फ़ाइल इंजेक्शन
URL_BASED_RFI_INJECTION=यूआरएल-व्युत्पन्न मूल फ़ाइल इंजेक्शन हमला।

#JWT इंजेक्शन
JWT_INJECTION_VULNERABILITY=JSON वेब टोकन (JWT) एक खुला मानक (RFC 7519) है जो एक कॉम्पैक्ट और स्वतंत्र विधि को परिभाषित करता है \
JSON ऑब्जेक्ट के रूप में विभिन्न ऑब्जेक्ट के बीच जानकारी को सुरक्षित रूप से स्थानांतरित करना। इस जानकारी को सत्यापित और विश्वसनीय किया जा सकता है क्योंकि यह डिजिटल रूप से हस्ताक्षरित है। \
JWT निष्पादित करते समय कई चीजें गलत हो सकती हैं और एप्लिकेशन के प्रमाणीकरण और प्राधिकरण को प्रभावित कर सकती हैं, \
और सिस्टम-व्यापी त्रुटियों को जन्म देता है। <br/><br/> JWT के लिए महत्वपूर्ण लिंक: \
<ol> <li> <a href='https://en.wikipedia.org/wiki/JSON_Web_Token' target='_blank'>विकी लिंक</a> \
  <li> <a href='https://jwt.io/introduction/' target='_blank'>Jwt.io</a> \
  </ol> जेडब्ल्यूटी में कमजोर कार्यान्वयन पर महत्वपूर्ण लिंक: \
  <ol> \ <li><a href='https://tools.ietf.org/html/draft-ietf-oauth-jwt-bcp-06' target='_blank'>JSON वेब टोकन सर्वश्रेष्ठ \
       वर्तमान प्रथाएँ(ieft दस्तावेज़)</a> \
    <li><a \
        href='https://cheatशीटseries.owasp.org/cheatशीट/JSON_Web_Token_Cheat_Sheet_for_Java.html' target='_blank'> \
        JWT कार्यान्वयन में कमजोरियों के लिए OWASP चीटशीट </a> \
    <li><a href='https://auth0.com/blog/critical-volnerability-in-json-web-token-libraries' target='_blank'>के लिए \
        JWT कार्यान्वयन में सर्वर साइड कमजोरियाँ</a> \
  </ol>

#### अटैकवेक्टर विवरण
JWT_URL_EXPOSING_SECURE_INFORMATION=अनुरोध में यूआरएल लीक से एक JWT टोकन शामिल है। यह पीसीआई के साथ-साथ अधिकांश उद्यम संगठनों के नियमों और विनियमों का उल्लंघन कर सकता है।
COOKIE_CONTAINING_JWT_TOKEN_SECURITY_ATTRIBUTES_MISSING=JWT टोकन कुकी से प्राप्त हुआ है, लेकिन बिना सुरक्षित/Httpकेवल चेतावनी ध्वज और गुम कुकी हेडर के।
COOKIE_WITH_HTTPONLY_WITHOUT_SECURE_FLAG_BASED_JWT_VULNERABILITY=कुकी से प्राप्त JWT टोकन में केवल Http ध्वज है लेकिन सुरक्षित चेतावनी ध्वज और कुकी हेडर का अभाव है।
COOKIE_BASED_LOW_KEY_STRENGTH_JWT_VULNERABILITY=कुकी-व्युत्पन्न JWT टोकन को भेद्यता बनाने के लिए एक असुरक्षित कुंजी के साथ हस्ताक्षरित किया गया है।
COOKIE_BASED_NULL_BYTE_JWT_VULNERABILITY=कुकी-व्युत्पन्न शून्य वर्णों के लिए कमजोर JWT टोकन सत्यापनकर्ता।
COOKIE_BASED_NONE_ALGORITHM_JWT_VULNERABILITY=कुकी-व्युत्पन्न गैर-एल्गोरिदमिक असुरक्षित JWT टोकन सत्यापनकर्ता।
COOKIE_BASED_KEY_CONFUSION_JWT_VULNERABILITY=कुंजी भ्रम भेद्यता के साथ कुकी-व्युत्पन्न JWT टोकन।
COOKIE_BASED_FOR_JWK_HEADER_BASED_JWT_VULNERABILITY=कुकी-व्युत्पन्न JWT टोकन सत्यापनकर्ता यह जांच नहीं करता है कि प्रदान की गई सार्वजनिक कुंजी एन्क्रिप्शन विश्वसनीय JWK फ़ील्ड के लिए ट्रस्टस्टोर में है या नहीं।
COOKIE_BASED_EMPTY_TOKEN_JWT_VULNERABILITY=कुकी से प्राप्त JWT टोकन में खाली टोकन भेद्यता हमलों के खिलाफ कम सुरक्षा है।



# SQL इंजेक्शन भेद्यता
SQL_INJECTION_VULNERABILITY=एक SQL क्वेरी जिसमें क्लाइंट से सिस्टम में डालने या इंजेक्ट करने के लिए सूचना इनपुट शामिल है \
एसक्यूएल इंजेक्शन हमला। एक सफल SQL इंजेक्शन और एक्सेस डेटाबेस से संवेदनशील जानकारी पढ़ सकता है, डेटाबेस में डेटा बदल सकता है (डालें/अपडेट/हटाएं), \
डेटाबेस पर प्रशासनिक स्तर के संचालन करें (जैसे DBMS को बंद करना), DBMS में पहले से मौजूद फ़ाइल सिस्टम को पुनर्स्थापित करें \
फ़ाइल की सामग्री, कुछ मामलों में ऑपरेटिंग सिस्टम को निर्देश जारी करती है। SQL इंजेक्शन हमला एक इंजेक्शन हमला है, \
यहां मूल रूप से निर्धारित SQL कमांड के निष्पादन को प्रभावित करने के लिए SQL कमांड को डेटा लेयर के इनपुट में इंजेक्ट किया जाता है। <br\>\
SQL इंजेक्शन के लिए महत्वपूर्ण लिंक: \
<ol> <li> <a href='https://en.wikipedia.org/wiki/SQL_injection' target='_blank'>विकी लिंक</a> \
  <li> <a href='https://owasp.org/www-community/attacks/SQL_Injection' target='_blank'>Owasp SQLInjection</a> \
  <li> <a href='https://www.youtube.com/watch?v=WkHkryIoLD0' target='_blank'>जो मैक्रे SQLInjection पर बात करते हैं</a>\
  <li> <a href='https://www.netsparker.com/blog/web-security/sql-injection-cheat-शीट/' target='_blank'>नेटस्पार्कर द्वारा SQL इंजेक्शन चीट शीट</a>\
  </ol> <br/><br/>\ रोकथाम तकनीकों पर महत्वपूर्ण लिंक: \
  <ol> \ <li><a href='https://cheatSheetseries.owasp.org/cheatshields/SQL_Injection_Prevention_Cheat_Sheet.html' target=”_blank'>ओवास्प प्रिवेंशन चीटशीट</a> \
    <li><a \
        href='https://www.websec.ca/kb/sql_injection' target='_blank'> \
        SQL इंजेक्शन ज्ञानकोष</a> \
  </ol>

  #### अटैकवेक्टर विवरण
ERROR_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=क्वेरी पैरामीटर सीधे SQL क्वेरी के अंत में जोड़े जाते हैं, जिससे कुछ शर्तों के तहत अपवाद होता है \
जिसके परिणामस्वरूप एप्लिकेशन डेटा का प्रदर्शन हो रहा है।
ERROR_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=क्वेरी पैरामीटर को "'" में लपेटा जाता है और फिर SQL क्वेरी के अंत में प्राप्त किया जाता है, जिससे कुछ परिस्थितियों में अपवाद होता है \
जिसके परिणामस्वरूप एप्लिकेशन डेटा का प्रदर्शन हो रहा है।
ERROR_SQL_INJECTION_URL_PARAM_REMOVES_SINGLE_QUOTE_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=एकल उद्धरण क्वेरी पैरामीटर से हटा दिए गए और फिर "'" में लपेटे गए और SQL क्वेरी के अंत में जोड़ दिए गए।
ERROR_SQL_INJECTION_URL_PARAM_APPENDED_TO_PARAMETERIZED_QUERY=क्वेरी पैरामीटर सीधे SQL क्वेरी के अंत में जोड़े जाते हैं, फिर एक पैरामीटरयुक्त क्वेरी उत्पन्न होती है। इस पर जोर देना है \
ReadyedStatement का उचित उपयोग बहुत महत्वपूर्ण है।
 
UNION_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=क्वेरी पैरामीटर सीधे क्वेरी के अंत में जोड़े जाते हैं, जिससे क्वेरी परिणाम लिखने के लिए \"यूनियन\" कीवर्ड का उपयोग किया जाता है।\
और एप्लिकेशन डेटा प्राप्त करें।
UNION_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=क्वेरी पैरामीटर को "'" में लपेटा जाता है और फिर क्वेरी के अंत में प्राप्त किया जाता है, जिससे क्वेरी परिणाम लिखने के लिए \"यूनियन\" कीवर्ड का उपयोग किया जाता है।\
और एप्लिकेशन डेटा प्राप्त करें।
UNION_SQL_INJECTION_URL_PARAM_REMOVES_SINGLE_QUOTE_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=एकल उद्धरण क्वेरी पैरामीटर से हटा दिए जाते हैं और "'" में लपेटे जाते हैं और SQL क्वेरी के अंत में जोड़ दिए जाते हैं\
क्वेरी परिणाम लिखने और एप्लिकेशन डेटा लाने के लिए \"यूनियन\" कीवर्ड का उपयोग किया जाता है।

BLIND_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=क्वेरी पैरामीटर सीधे क्वेरी के अंत में जोड़े जाते हैं ताकि क्वेरी के साथ छेड़छाड़ की जा सके।
BLIND_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=क्वेरी पैरामीटर को "'" में लपेटा जाता है और SQL क्वेरी के अंत में जोड़ा जाता है ताकि क्वेरी के साथ छेड़छाड़ की जा सके।


#### एसएसआरएफ भेद्यता
SSRF_VULNERABILITY=सर्वर साइड रिक्वेस्ट फोर्जरी (SSRF) हमले में, एक हमलावर सर्वर पर कार्यक्षमता का दुरुपयोग कर सकता है।\
आंतरिक संसाधनों को पढ़ें या अद्यतन करें. एक हमलावर एक <strong>URL</strong> प्रदान या संशोधित कर सकता है जो सर्वर पर चल रहे कोड को डेटा पढ़ने या परोसने की अनुमति देता है, \
और URL सावधानीपूर्वक चुनने से, <strong>एक हमलावर सर्वर तक पहुंच प्राप्त करने में सक्षम हो सकता है</strong>\
कॉन्फ़िगरेशन, जैसे AWS मेटाडेटा, आंतरिक सेवाओं जैसे http-सक्षम डेटाबेस से लिंक करना, या आंतरिक सेवाओं के लिए अनुरोध निष्पादित करना \
अनुरोध पोस्ट करें, इन्हें उजागर नहीं किया जाना चाहिए। \
एसएसआरएफ के लिए महत्वपूर्ण लिंक: \
<ol>\
  <li> <a href='https://en.wikipedia.org/wiki/Server-side_request_forgery' target='_blank'>विकी लिंक</a> \
  <li> <a href='https://owasp.org/www-community/attacks/Server_Side_Request_Forgery' target='_blank'>Owasp SSRF</a> \
  <li> <a href='https://www.youtube.com/watch?v=AsPpxqIlTDU' target=”_blank'>SSRF (सर्वर साइड रिक्वेस्ट फोर्जरी) मुसाब खान द्वारा</a>\
  </ol>
SSRF_VULNERABILITY_URL_WITHOUT_CHECK=प्रदत्त URL के लिए कोई सत्यापन नहीं किया गया।
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL=दिए गए URL पर फ़ाइल:// प्रोटोकॉल की अनुमति नहीं है।
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL_AND_169.254.169.254=फ़ाइल:// प्रोटोकॉल और आंतरिक मेटाडेटा सेवा आईपी 169.254.169.254 तक पहुंच की अनुमति नहीं है।
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL_AND_INTERNAL_METADATA_URL=file:// प्रोटोकॉल और आंतरिक मेटाडेटा सेवा तक पहुंच की अनुमति नहीं है।
SSRF_VULNERABILITY_URL_ONLY_IF_IN_THE_WHITELIST=केवल श्वेतसूची वाले यूआरएल की अनुमति है।
