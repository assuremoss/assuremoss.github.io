# Exception Code Labels
INVALID_END_POINT=Följande {0} endpoint är inte tillgänglig. Kontrollera namnet för endpoint från allEndPoint-anropet och prova igen.
INVALID_LEVEL=Följande {0} nivå är inte ett giltigt nivåvärde. Kontrollera vilken nivå och endpoint som stöds från allEndPoint-anropet och försök igen.
UNAVAILABLE_LEVEL=Följande {0} nivå i {1} endpoint är inte tillgänglig. Kontrollera vilken nivå och endpoint som stöds från allEndPoint-anropet och försök igen.
INVALID_ACCESS=Följande {0} metod är inte tillgänglig. Orsakerna kan vara felaktig synlighet eller felaktig metoddefinition. Kontrollera loggarna.
INVALID_AGRUMENTS=Följande {0} metod tilldelas inte rätt uppsättning argument. Kontrollera loggarna.
SYSTEM_ERROR=Ett systemfel uppstod. Kontrollera loggarna.

# XSS based Injections
XSS_VULNERABILITY=Cross-Site Scripting (XSS) attacker är en typ av injektion, i vilken skadliga skript är injicerade i \
annars ofarliga och pålitliga hemsidor. XSS attacker uppstår när en angripare använder en webbapplikation för att skicka skadlig kod, \
 vanligtvis i form av skript från webbläsarsidan, till en annan slutanvändare. Brister som tillåter denna typ av attacker att lyckas \
  är ganska utbredda och uppstår överallt där en webbapplikation använder indata från en användare i utdatan \
  den genereras utan validering eller att kodas. <br/> <br/> En angripare kan använda XSS för att skicka skadliga skript till en intet ont anande användare. \
  Slutanvändaren\u2019s webbläsare har inget sätt att veta att skriptet inte är pålitligt, och kommer köra skriptet. \
   På grund utav att det trot att skriptet kommer från en pålitlig källa, kan det skadliga skriptet komma åt alla kakor, session tokens, \
    eller annan känslig information som lagras av webbläsaren och används på webbplatsen. Dessa skript kan till och med skriva om innehållet \
     på HTML sidan. <br/><br/> För mer information om XSS: <ol><li><a href="https://owasp.org/www-community/attacks/xss/" target="_blank">Owasp XSS</a> \
     <li><a href="https://www.google.com/about/appsecurity/learning/xss/" target="_blank">Google Applikation Säkerhet</a></ol>

#### AttackVector description
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG="comment" query-parametervärdet läggs till direkt i "div" taggen.
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG="comment" query-parametervärdet läggs till direkt i "div" taggen efter att "<img" och "<input" taggarna ersatts.
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_CASE_INSENSITIVE="comment" query-parametervärdet läggs till direkt i "div" taggen efter att skiftlägesokänsliga "<img" och "<input" taggar har ersatts.
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_IF_TAGS_ARE_PRESENT_BEFORE_NULL_BYTE="comment" query-parametervärdet läggs till direkt i "div" taggen efter att "<img" och "<input" taggar ersatts om dessa finns före Null Byte.
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_CASE_INSENSITIVEIF_TAGS_ARE_PRESENT_BEFORE_NULL_BYTE="comment" query parametervärdet läggs till direkt i "div" taggen efter att skiftlägesokänsliga "<img" och "<input" taggar ersatts om dessa finns före Null Byte.
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_AFTER_HTML_ESCAPING_POST_CONTENT_BEFORE_NULL_BYTE="comment" query-parametervärdet läggs till direkt i "div" taggen efter genomförd HTML escape från innehållet före Null Byte medan den andra delen lämnas som den är.

     
## Image Tag Injections
XSS_IMAGE_TAG_INJECTION=$XSS_VULNERABILITY <br> Denna sårbarhet är relaterad till XSS-attacker via Image-taggen. Om ..
#### Attack Vector Description
XSS_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG=URL-parametrar läggs till direkt i src-attributet för Image-taggen.\

XSS_QUOTES_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=Citaten läggs till URL-parametrarna och läggs sen direkt till src-attributet för Image-taggen
XSS_HTML_ESCAPE_ON_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG=HTML escaping görs på URL-parametrarna och läggs sen direkt till src-attributet för Image-taggen
XSS_HTML_ESCAPE_ON_DIRECT_INPUT_AND_REMOVAL_OF_VALUES_WITH_PARENTHESIS_SRC_ATTRIBUTE_IMG_TAG=HTML escaping tillsammans med borttagande av värden innehållandes parantes görs på URL-parametrar och läggs sen direkt till src-attributet av Image-taggen.
XSS_QUOTES_AND_WITH_HTML_ESCAPE_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=HTML escaping görs på URL-parametrar och infogas sen i citattecken in i src-attributet för Image-taggen.
XSS_HTML_ESCAPE_PLUS_FILTERING_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG_BUT_NULL_BYTE_VULNERABLE=URL-parametrar är HTML escaped, validerade mot en whitelist för filnamn och infogade i src-attributet för Image-taggen, validator för validering av filnamn är dock sårbar för Null Byte injektion.
XSS_QUOTES_AND_WITH_HTML_ESCAPE_PLUS_FILTERING_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=URL-parametrar är HTML escaped, validerade mot en whitelist för filnamn och infogade i citattecken in i src-attributet för Image-taggen.

## Html Tag Injection
XSS_HTML_TAG_INJECTION=XSS-attack baserad på HTML-taggar.
XSS_DIRECT_INPUT_DIV_TAG=HTML-taggen injiceras direkt in i div-taggen.

### Attack vectors
XSS_DIRECT_INPUT_DIV_TAG=URL-parametrar läggs till direkt i div taggen.
XSS_DIRECT_INPUT_DIV_TAG_AFTER_REMOVING_VALUES_CONTAINING_ANCHOR_SCRIPT_AND_IMG_TAG=URL-parametrar läggs till direkt i div-taggen om de inte har Script/Image och Anchor-tagg.
XSS_DIRECT_INPUT_DIV_TAG_AFTER_REMOVING_VALUES_CONTAINING_ANCHOR_SCRIPT_IMG_TAG_AND_ALERT_KEYWORD=URL-parametrar läggs till direkt i div-taggen om de inte har Script/Image/Anchor tagg och Javascript och Alert nyckelord.

# URL Redirection
## Location Header Injection
OPEN_REDIRECTION_VULNERABILITY_3XX_BASED=Öppen omdirigeringssårbarhet uppstår när en applikation innehåller användarkontrollerbar \
data till målet för en omdirigering på ett osäkert sätt.<br/> En angripare kan konstruera en URL innifrån applikationen som \
orsakar en omdirigering till en godtycklig extern domän. Detta beteende kan utnyttjas för att underlätta phishing attacker mot användare av applikationen.<br/>\
Möjligheten att använda en autentisk applikations-URL, rikta in sig på rätt domän och med ett giltigt SSL certifikat (om SSL används), ger trovärdighet till\
phishing attacken eftersom många användare, även om de verifierar dessa funktioner, inte kommer att märka den efterföljande omdirigeringen till en annan domän. \
<br/><br/> <a href="https://www.w3.org/Protocols/rfc2616/rfc2616.html">RFC 2616 - "Hypertext Transfer Protocol - HTTP/1.1" target="_blank"</a> definierar en rad \
 olika 3xx status koder som kommer få en webbläsare att omdirigeras till en specificerad plats och dess implementering är baserad på 3xx status koder <br/><br/>\
 Viktiga länkar:<ol>\
 <li><a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse" target="_blank">WASC-38</a><br/></li>\
 <li><a href="https://cwe.mitre.org/data/definitions/601.html" target="_blank">CWE-601</a><br/></li>\
 <li><a href="https://portswigger.net/kb/issues/00500100_open-redirection-reflected" target="_blank">Port Swigger's sårbarhetsdokumentation</a><br/></li>\
 <li><a href="https://en.wikipedia.org/wiki/URL_redirection" target="_blank">Wiki länk for som beskriver syftet med URL omdirigering</a></li>\
 <li><a href="https://github.com/payloadbox/open-redirect-payload-list" target="_blank">Öppen lista för omdirigering payloads</a></li>\
 <li><a href="https://appsec-labs.com/portal/case-study-open-redirect/" target="_blank">Lägg till domän som prefix - fallstudie</a></li>\
 </ol>\
 Några myter: <a href="https://security.stackexchange.com/questions/59517/are-url-shorteners-vulnerable-due-to-open-redirects" target="_blank">Är URL förkortare \u201Csårbara\u201D på grund utav öppna omdirigeringar?</a><br/>
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER="returnTo" query-parameterns värde läggs till direkt i "Location" headern.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_WWW_OR_DOMAIN_IS_SAME="returnTo" query-parameterns värde läggs till direkt i "Location" headern om den inte startar med "http", "www" och "https" eller om domänen är densamma som applikationens.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_WWW_//_OR_DOMAIN_IS_SAME="returnTo" query-parameterns värde läggs till direkt i "Location" headern om den inte startar med "http", "www", "https" och "//" eller om domänen är densamma som applikationens.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_WWW_HTTPS_//_NULL_BYTE_OR_DOMAIN_IS_SAME="returnTo" query-parameterns värde läggs till direkt i "Location" headern om den inte startar med "http", "www", "https", "//" och Null Byte eller om domänen är densamma som applikationens.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_//_WWW_%_OR_DOMAIN_IS_SAME="returnTo" query-parameterns värde läggs till direkt i "Location" headern om den inte startar med "http", "www", "https", "//" och tecknet mindre än ascii värdet 33 eller om domänen är densamma som applikationens.
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADDED_TO_LOCATION_HEADER_BY_ADDING_DOMAIN_AS_PREFIX="returnTo" query-parameterns värde läggs till direkt i "Location" headern om den har prefixet med applikationens domännamn.


## Meta Tag based URL Redirection
OPEN_REDIRECTION_VULNERABILITY_META_TAG_BASED=Öppen omdirigeringssårbarhet uppstår när en applikation innehåller användarkontrollerbar \
data till målet för en omdirigering på ett osäkert sätt.<br/> En angripare kan konstruera en URL innifrån applikationen som \
orsakar en omdirigering till en godtycklig extern domän. Detta beteende kan utnyttjas för att underlätta phishing attacker mot användare av applikationen.<br/>\
Möjligheten att använda en autentisk applikations-URL, rikta in sig på rätt domän och med ett giltigt SSL certifikat (om SSL används), ger trovärdighet till\
phishing attacken eftersom många användare, även om de verifierar dessa funktioner, inte kommer att märka den efterföljande omdirigeringen till en annan domän.  \
<br/><br/> Ett HTML meta-element som specificerar tiden i sekunder före webbläsaren ska uppdatera sidan. \
Genom att tillhandahålla en alternativ URI kan elementet användas som en tidsinställd URL omdirigering.\
 \
Till exempel, i följande exempel kommer webbläsaren omdirigeras till example.com efter 5 sekunder: <br/> \
          &lt;meta http-equiv=&quot;refresh&quot; content=&quot;5;url=http://example.com&quot;&gt; <br/><br/>\
 Viktiga länkar:<ol>\
 <li><a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse" target="_blank">WASC-38</a><br/></li>\
 <li><a href="https://cwe.mitre.org/data/definitions/601.html" target="_blank">CWE-601</a><br/></li>\
 <li><a href="https://portswigger.net/kb/issues/00500100_open-redirection-reflected" target="_blank">Port Swigger's sårbarhetsdokumentation</a><br/></li>\
 <li><a href="https://en.wikipedia.org/wiki/URL_redirection" target="_blank">Wiki länk for som beskriver syftet med URL omdirigering</a></li>\
 <li><a href="https://github.com/payloadbox/open-redirect-payload-list" target="_blank">Öppen lista för omdirigering payloads</a></li>\
 <li><a href="https://appsec-labs.com/portal/case-study-open-redirect/" target="_blank">Lägg till domän som prefix - fallstudie</a></li>\
 </ol>\
 Några myter: <a href="https://security.stackexchange.com/questions/59517/are-url-shorteners-vulnerable-due-to-open-redirects" target="_blank">Är URL förkortare \u201Csårbara\u201D på grund utav öppna omdirigeringar?</a><br/>
URL_REDIRECTION_META_TAG_BASED_INJECTION=URL-omdirigering baserad på metatagg.
URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_META_TAG=URL-parametern läggs till direkt i metataggen.



# UNRESTRICTED_FILE_UPLOAD_VULNERABILITY
UNRESTRICTED_FILE_UPLOAD_VULNERABILITY=Uppladdade filer utgör en betydande risk för applikationer. Det första steget i många attacker är att få kod till systemet som ska attackeras. Sen behöver attacken bara hitta ett sätt att exekvera koden.\
<br/>Konsekvenserna av obegränsad filuppladdning kan variera, inklusive fullständig systemkapning, ett överbelastat filsystem eller databas, vidarebefodra attacker till back-end system, attacker på klientsidan, eller helt enkelt förändring av utseendet. Det beror helt på vad applikationen gör med uppladdade filer och speciellt var de lagras.\
<br/><br/>\
Viktiga länkar:<br/>\
<ol> <li> <a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload" target="_blank">Owasp Wiki Länk</a>  \
 <li> <a href="https://www.youtube.com/watch?v=CmF9sEyKZNo" target="_blank">Ebrahim Hegazy prata om obegränsad filuppladdning</a> \
 <li> <a href="https://www.sans.org/blog/8-basic-rules-to-implement-secure-file-uploads/" target="_blank">Sans regler för att implementera säker filuppladdning</a> \
</ol>

#### Attack Vector Description
UNRESTRICTED_FILE_UPLOAD_NO_VALIDATION_FILE_NAME=Det finns ingen validering av den uppladdade filens namn.
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_FILE_EXTENSION=Alla filtillägg är tillåtna utom .html tillägg.
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_NOT_HTM_FILE_EXTENSION=Alla filtillägg är tillåtna utom .html och .htm tillägg.
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_NOT_HTM_FILE_EXTENSION_CASE_INSENSITIVE=Alla filtillägg är tillåtna utom skiftlägesokänsliga .html och .htm tillägg.
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_CONTAINS_.PNG_OR_.JPEG_CASE_INSENSITIVE=Endast filnamn är tillåtet om det innehåller skiftlägesokänsligt .jpeg eller .png.
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_ENDS_WITH_.PNG_OR_.JPEG_CASE_INSENSITIVE_AND_FILE_NAMES_CONSIDERED_BEFORE_NULL_BYTE=Endast filnamn är tillåtet om det slutar med skiftlägesokänsligt .jpeg eller .png och som endast beaktas före Nyll Byte.
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_ENDS_WITH_.PNG_OR_.JPEG_CASE_INSENSITIVE=Endast filnamn är tillåtet om det slutar med skiftlägesokänsligt .jpeg eller .png.


# XXE Vulnerability
XXE_VULNERABILITY=En XML External Entity attack är en typ av attack mot en \
applikation som analyserar XML input. Denna attack uppstår när XML input innehåller \
en referens till en extern enhet bearbetas av en svagt konfigurerad XML parser.\
Denna attack kan leda till avslöjande av konfidentiell data, denial of service, \
förfalskning av begäran på serversidan, port skanning från perspektivet av maskinen där \
parsern är lokaliserad, och annan systempåverkan.\
<br/><br/>\
Viktiga Länkar:<br/>\
<ol> <li> <a href="https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing" target="_blank">Owasp Wiki Länk</a>  \
 <li> <a href="https://www.youtube.com/watch?v=DREgLWZqMWg" target="_blank">HackHappys video tutorial</a> \
 <li> <a href="https://medium.com/@onehackman/exploiting-xml-external-entity-xxe-injections-b0e3eac388f9" target="_blank">Medium artikel av OneHackMan</a>\
 <li> <a href="https://portswigger.net/web-security/xxe" target="_blank">Portswigger XXE dokumentation</a> \
 <li> <a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.md1" target="_blank">Owasp Prevention cheat sheet</a>\
</ol>
#### Attack Vector Description
XXE_NO_VALIDATION=Det finns ingen validering av XML som skickas i request-bodyn.
XXE_DISABLE_GENERAL_ENTITY=Parsern är inaktiverad från att behandla allmänna externa enheter.
XXE_DISABLE_GENERAL_AND_PARAMETER_ENTITY=Parsern är inaktiverad från att behandla allmänna enheter och parameterenheter.

# Path Traversal Attack
PATH_TRAVERSAL_VULNERABILITY=En katalogövergång (eller sökvägsövergång) består i att utnyttja otillräcklig säkerhetsvalidering/sanering av input filnamn som användaren bistått,\
så att tecken som representerar "gå till överordnad katalog" går genom filens APIer.\
<br/><br/>\
Målet med denna attack är att använda en påverkad applikation för att få obehörig åtkomst till filsystemet. <br/><br/> \
Viktiga Länkar:<br/>\
<ol> <li> <a href="https://en.wikipedia.org/wiki/Directory_traversal_attack" target="_blank">Wiki Länk</a>  \
 <li> <a href="https://owasp.org/www-community/attacks/Path_Traversal" target="_blank">Owasp Wiki Länk</a> \
</ol>

#### AttackVector description
PATH_TRAVERSAL_URL_PARAM_DIRECTLY_INJECTED="fileName" query-parameterns värde läggs direkt till i sökvägen för att läsa filen.
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_NOT_PRESENT_DIRECTLY_INJECTED="fileName" query-parameterns värde läggs direkt till om det inte innehåller "..".
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_OR_%2F_NOT_PRESENT_DIRECTLY_INJECTED="fileName" query-parameterns värde läggs direkt till om det inte innehåller ".." eller "%2f" vilket är URL-kodningen för "/".
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_OR_%2F_CASE_INSENSITIVE_NOT_PRESENT_DIRECTLY_INJECTED="fileName" query parameterns värde läggs direkt till om det inte innehåller ".." eller "%2f" eller "%2F" vilket är URL-kodningen för "/".
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_WITH_OR_WITHOUT_URL_ENCODING_NOT_PRESENT_DIRECTLY_INJECTED="fileName" query parameterns värde läggs direkt till om det inte innehåller "..", tar även hand om URL-kodningen.
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_DIRECTLY_INJECTED="fileName" query-parameterns värde före Null Byte läggs till direkt i sökvägen för att läsa filen.
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_PARENT_DIRECTORY_PATH_NOT_PRESENT_DIRECTLY_INJECTED="fileName" query-parameterns värde före Null Byte läggs till direkt om det inte innehåller "../".
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_NOT_PRESENT_DIRECTLY_INJECTED="fileName" query-parameterns värde före Null Byte läggs till direkt om det inte innehåller "..".
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_OR_%2F_NOT_PRESENT_DIRECTLY_INJECTED="fileName" query-parameterns värde före Null Byte läggs till direkt om det inte innehåller ".." eller "%2f" vilket är URL-kodningen för "/".
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_OR_%2F_CASE_INSENSITIVE_NOT_PRESENT_DIRECTLY_INJECTED="fileName" query-parameterns värde före Null Byte läggs till direkt om det inte innehåller ".." eller "%2f" eller "%2F" vilket är URL-kodningen för "/".
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_WITH_OR_WITHOUT_URL_ENCODING_NOT_PRESENT_DIRECTLY_INJECTED="fileName" query-parameterns värde före Null Byte läggs till direkt om det inte innehåller "..", tar även hand om URL-kodningen.


# Command Injection Attack
COMMAND_INJECTION_VULNERABILITY=Kommandoinjektion är en attack där målet är exekvering av godtyckliga kommandon på värdens operativsystem\
via en sårbar applikation. Kommandoinjektionsattacker är möjliga när en applikation skickar osäker data från användaren (formulär, cookies, HTTP headers etc.)\
till ett systemskal. I den här attacken exekveras vanligtvis kommandon från angriparens operativsystem med samma privilegier som det sårbara programmet har.\
Kommandoinjektionsattacker är till stor del möjliga på grund utav otillräcklig input validering. <br/><br/>\
Viktiga länkar om sårbarheter för kommandoinjektion :<br/>\
<ol> <li> <a href="https://cwe.mitre.org/data/definitions/77.html" target="_blank">CWE-77</a>  \
 <li> <a href="https://owasp.org/www-community/attacks/Command_Injection" target="_blank">Owasp Wiki Länk</a> \
</ol>

#### Attack vectors
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED="ipaddress" query-parameterns värde exekveras direkt.
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_NOT_PRESENT="ipaddress" query-parameterns värde exekveras direkt om ";", "&" eller blanksteg inte finns med.
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_NOT_PRESENT="ipaddress" query-parameterns värde exekveras direkt om ";", "&", "%26", "%3B" eller blanksteg inte finns med.
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_CASE_INSENSITIVE_NOT_PRESENT="ipaddress" query-parameterns värde exekveras direkt om ";", "&", "%26", "%3B", "%3b" eller blanksteg inte finns med.
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_%7C_CASE_INSENSITIVE_NOT_PRESENT="ipaddress" query-parameterns värde exekveras direkt om ";", "&", "%26", "%3B", "%3b", "%7C", "%7c" eller blanksteg inte finns med.


# Local File Injection
#URL_BASED_LFI_INJECTION=Url based Local File Injection attack.
#LFI_URL_PARAM_BASED_DIRECT_INJECTION=Url Parameter \"fileName\" is directly passed to the include file.
#LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE=Url Parameter \"fileName\" is validated and passed to include file.

# Local File Injection with Null Byte
#URL_WITH_NULL_BYTE_BASED_LFI_INJECTION=Url with Null Byte Injection based Local File Injection attack.
#LFI_URL_PARAM_AND_NULL_BYTE_BASED_DIRECT_INJECTION=Url Parameter \"fileName\" is directly passed to the include file if containing Null Byte.
#LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE=Url Parameter \"fileName\" is validated and passed to include file.

# Remote File Injection
URL_BASED_RFI_INJECTION=Lokal URL-baserad filinjektionsattack

# JWT Injection
JWT_INJECTION_VULNERABILITY=JSON Web Token (JWT) är en öppen standard (RFC 7519) som definierar ett kompakt och fristående sätt för att\
säkert skicka information mellan parter i form av ett JSON objekt. Denna information kan verifieras och ses som tillförlitlig eftersom\
den är digitalt signerad. Det kan finnas flera saker som kan gå fel med implementeringen av JWT och som kan påverka autentiseringen eller auktoriseringen  \
av applikationen och resultera i fullständig kompromiss av systemet. <br/><br/> Viktiga länkar om JWT : \
<ol> <li> <a href="https://en.wikipedia.org/wiki/JSON_Web_Token" target="_blank">Wiki Länk</a>  \
 <li> <a href="https://jwt.io/introduction/" target="_blank">Jwt.io</a> \
 </ol> Viktiga länkar om sårbara implementeringar i JWT : \
 <ol>  <li><a href="https://tools.ietf.org/html/draft-ietf-oauth-jwt-bcp-06" target="_blank">JSON Web Token bäst \
      aktuell praxis(ieft dokument)</a> \
   <li><a \
       href="https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html" target="_blank"> \
       OWASP cheatsheet för sårbarheter i JWT implementering </a> \
   <li><a href="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries" target="_blank">För \
       sårbarheter på serversidan i JWT implementeringar</a> \
 </ol>

#### AttackVector description
JWT_URL_EXPOSING_SECURE_INFORMATION=Förfrågan innehåller en JWT-token som är synlig i URL:en. Detta kan bryta mot PCI och de flesta organisatoriska efterlevnadspolicyer.
COOKIE_CONTAINING_JWT_TOKEN_SECURITY_ATTRIBUTES_MISSING=Cookiebaserad JWT-token men utan Secure/HttpOnly flaggor och även utan cookie-prefix.
COOKIE_WITH_HTTPONLY_WITHOUT_SECURE_FLAG_BASED_JWT_VULNERABILITY=Cookiebaserad JWT-token men med HttpOnly flagga mem itam Secure flagga och även utan cookie-prefix.
COOKIE_BASED_LOW_KEY_STRENGTH_JWT_VULNERABILITY=Cookiebaserad JWT-token, sårbar på grund av svag nyckelsignatur.
COOKIE_BASED_NULL_BYTE_JWT_VULNERABILITY=Cookiebaserad JWT-tokenvalidator, sårbar på grund av Null Byte.
COOKIE_BASED_NONE_ALGORITHM_JWT_VULNERABILITY=Cookiebaserad JWT-tokenvalidator, sårbar på grund av None-algoritmen.
COOKIE_BASED_KEY_CONFUSION_JWT_VULNERABILITY=Cookiebaserad JWT-token, sårbar på grund av nyckelförvirring.
COOKIE_BASED_FOR_JWK_HEADER_BASED_JWT_VULNERABILITY=Cookiebaserad JWT-tokenvalidator som är sårbar för att lita på JWK-fältet utan att kontrollera om den tillhandahållna offentliga nyckeln finns i truststore eller inte.
COOKIE_BASED_EMPTY_TOKEN_JWT_VULNERABILITY=Cookiebaserad JWT-token, sårbar för attack med tom token.



# SQL Injection Vulnerability
SQL_INJECTION_VULNERABILITY=En SQL injection attack består av infogande eller "injektion" av SQL-querys via input datan \
från klienten till applikationen. En framgångsrik SQL injektion kan läsa känslig data från databasen, modifiera databasdata (Insert/Update/Delete), \
exekvera administrationsoperationer på databasen (som att stänga av DBMS), återställa innehållet i en given fil \
på DBMS-filsystemet och i vissa fall utfärda kommandon till operativsystemet. SQL injektioner är en typ av injektionsattacker,\
där SQL-kommandon injiceras in i datainmatningen för att påverka exekveringen av fördefinierade SQL-kommandon. <br>\
Viktiga länkar om SQLInjection : \
<ol> <li> <a href="https://en.wikipedia.org/wiki/SQL_injection" target="_blank">Wiki Länk</a>  \
 <li> <a href="https://owasp.org/www-community/attacks/SQL_Injection" target="_blank">Owasp SQLInjection</a> \
 <li> <a href="https://www.youtube.com/watch?v=WkHkryIoLD0" target="_blank">Joe McCray pratar om SQLInjection</a>\
 <li> <a href="https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/" target="_blank">SQL Injection cheat sheet av netsparker</a>\
 </ol> <br/><br/> Viktiga länkar om förebyggande tekniker : \
 <ol>  <li><a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html" target="_blank">Owasp Prevention cheatsheet</a> \
   <li><a \
       href="https://www.websec.ca/kb/sql_injection" target="_blank"> \
       SQL Injection kunskapsbas </a> \
 </ol>

#### AttackVector description
ERROR_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=Query-parametern läggs direkt till i SQL-Query vilket orsakar undantag i vissa scenarion\
 och exponerar därför applikationsinformation.
ERROR_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=Query-parametern omsluts med "'" och läggs sen till i SQL-Query vilket orsakar undantag i vissa scenarion \
 och exponerar därför applikationsinformation.
ERROR_SQL_INJECTION_URL_PARAM_REMOVES_SINGLE_QUOTE_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=Det enda citatet tas bort från Query-parametern och läggs sen till i SQL-Query genom att omslutas\
 med "'".
ERROR_SQL_INJECTION_URL_PARAM_APPENDED_TO_PARAMETERIZED_QUERY=Query-parametern läggs till direkt i SQL-Query och sedan bildas en parametrerad query. Detta för att visa att\
 korrekt användning av PreparedStatement är viktigt. 
UNION_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=Query-parametern läggs direkt till Query och därför kan nyckelordet "Union" användas för att gruppera resultaten och\
extrahera information från applikationen.
UNION_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=Query-parametern omsluts med "'" och läggs sen till Query och därför kan nyckelordet "Union" användas för att gruppera resultaten och\
extrahera information från applikationen.
UNION_SQL_INJECTION_URL_PARAM_REMOVES_SINGLE_QUOTE_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=Det enda citatet tas bort från Query-parametern och läggs sen till i SQL-Query genom att omslutas med "'"\
och därför kan nyckelordet "Union" användas för att gruppera resultaten och extrahera information från applikationen.\

BLIND_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=Query-parametern läggs direkt till Query därför kan Query manipuleras.
BLIND_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=Query-parametern omsluts med "'" och läggs sen till SQL-Query därför kan Query manipuleras.


#### SSRF Vulnerability
SSRF_VULNERABILITY=I en förfalskning av begäran på serversidan (Server-Side Request Forgery, SSRF) attack kan angriparen missbruka funktionalitet på servern för att \
läsa eller uppdatera interna resurser. Angriparen kan tillhandahålla eller ändra en <strong>URL</strong> som koden som körs på servern kommer läsa   \
eller skicka data till, och genom att noggrant välja URL:er, <strong>kan angriparen eventuellt läsa serverns </strong>\
konfigurationer såsom AWS metadata, ansluta till interna tjänster såsom http-aktiverade databaser eller göra POST-förfrågningar\
till interna tjänster som inte är menade att exponeras. \
Viktiga länkar om SSRF : \
<ol> \
 <li> <a href="https://en.wikipedia.org/wiki/Server-side_request_forgery" target="_blank">Wiki Länk</a>  \
 <li> <a href="https://owasp.org/www-community/attacks/Server_Side_Request_Forgery" target="_blank">Owasp SSRF</a> \
 <li> <a href="https://www.youtube.com/watch?v=AsPpxqIlTDU" target="_blank">SSRF (Server Side Request Forgery) av Musab Khan</a>\
 </ol>
SSRF_VULNERABILITY_URL_WITHOUT_CHECK=Ingen validering på den angivna URL:en.
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL=file:// protokollet är inte tillåtet för den angivna URL:en.
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL_AND_169.254.169.254=file:// protokollet samt åtkomst till den interna metadatatjänsten IP 169.254.169.254 är inte tillåtet.
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL_AND_INTERNAL_METADATA_URL=file:// protokollet samt åtkomst till den interna metadatatjänsten är inte tillåtet.
SSRF_VULNERABILITY_URL_ONLY_IF_IN_THE_WHITELIST=Bara vitlistade URL:er är tillåtna.
