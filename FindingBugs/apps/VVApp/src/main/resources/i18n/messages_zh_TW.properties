EMPTY_LABEL=

# Exception Code Labels
INVALID_END_POINT=以下的 {0} 終端點並不存在。請從 allEndPoint 呼叫裡來確認終端點名稱後再試一次。
INVALID_LEVEL=以下的 {0} 級別並不是一個有效級別值。請從 allEndPoint 呼叫裡來確認支援的級別與終端點後再試一次。
UNAVAILABLE_LEVEL=以下的 {1} 終端點裡的 {0} 級別並不存在。請從 allEndPoint 呼叫裡來確認支援的級別與終端點後再試一次。
INVALID_ACCESS=無法取得以下的 {0} 方法。原因可能為不適當的可見度或方法定義。請查照紀錄。
INVALID_AGRUMENTS=以下的 {0} 方法的參數組不正確。請查照紀錄。
SYSTEM_ERROR=系統異常。請查照紀錄。

# XSS based Injections
BILITY=跨網站指令碼 (XSS) 攻擊是一種注入式的攻擊，他會在原本良性可信賴的 \
網站注入惡意程式碼。 XSS 攻擊會在攻擊者用網路程式傳送惡意程式碼時發生， \
通常瀏以瀏覽器端的程式碼的形態呈現給不同的終端使用者。讓這些攻擊成功的漏洞 \
還蠻常見的，任何時候一個網路程式輸出使用者輸入的資料 \
但沒有審核或加密就會發生。 <br/> <br/> 一個攻擊者可以使用 XSS 來傳送惡意程式碼給毫無戒心的使用者。 \
終端使用者\u2019s 瀏覽器完全無法知道這程式碼不可靠，然後執行程式碼。 \
因為他認為程式碼來自可信的來源，這個惡意程式碼可以存取任何的 cookies, session tokens, \
或其他被瀏覽器保留來使用在這個特定網站的敏感的資訊。這些程式碼甚至可以重寫 \
這個 HTML 網頁的內容 <br/><br/> 更多關於 XSS 的資訊: <ol><li><a href="https://owasp.org/www-community/attacks/xss/" target="_blank">Owasp XSS</a> \
XSS_VULNERA     <li><a href="https://www.google.com/about/appsecurity/learning/xss/" target="_blank">Google Application Security</a></ol>

#### AttackVector description
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG=\"comment\" 查詢參數值被直接加在 \"div\" 標籤上。
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG=\"comment\" 查詢參數值在取代"<img" 與 "<input" 標籤後被直接加在 \"div\" 標籤上。
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_CASE_INSENSITIVE=\"comment\" 查詢參數值在取代不分大小寫的"<img" 與 "<input" 標籤後被直接加在 \"div\" 標籤上。

PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_IF_TAGS_ARE_PRESENT_BEFORE_NULL_BYTE=\"comment\" 查詢參數值在取代"<img" 與 "<input" 標籤後被直接加在 \"div\" 標籤上，如果這些標籤在空字符之前存在的話。
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_CASE_INSENSITIVEIF_TAGS_ARE_PRESENT_BEFORE_NULL_BYTE=\"comment\" 查詢參數值在取代不分大小寫的"<img" 與 "<input" 標籤後被直接加在 \"div\" 標籤上，如果這些標籤在空字符之前存在的話。
PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_AFTER_HTML_ESCAPING_POST_CONTENT_BEFORE_NULL_BYTE=\"comment\" 查詢參數值在 HTML 跳脫空字符之前存在的內容被直接加在 \"div\" 標籤上，而且剩下的部分不變。

     
## Image Tag Injections
XSS_IMAGE_TAG_INJECTION=$XSS_VULNERABILITY <br\> 這一個漏洞跟圖片標籤的 XSS 攻擊有關。 如果...
#### Attack Vector Description
XSS_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG=Url 參數被直接加在圖片標籤的 src 屬性。
XSS_QUOTES_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=引用的內容被加在 Url 參數然後被直接加在圖片標籤的 src 屬性。
XSS_HTML_ESCAPE_ON_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG= Url 參數出現 HTML 跳脫然後被直接加在圖片標籤的 src 屬性。
XSS_HTML_ESCAPE_ON_DIRECT_INPUT_AND_REMOVAL_OF_VALUES_WITH_PARENTHESIS_SRC_ATTRIBUTE_IMG_TAG= Url 參數上出現HTML 跳脫而且有括號的值被移除，然後被直接加在圖片標籤的 src 屬性。
XSS_QUOTES_AND_WITH_HTML_ESCAPE_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=Url 參數出現 HTML 跳脫之後被插入引號中並放入圖片標籤的 src 屬性。
XSS_HTML_ESCAPE_PLUS_FILTERING_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG_BUT_NULL_BYTE_VULNERABLE=Url 參數出現 HTML 跳脫, 並在檔案白名單中被驗證後被植入圖片標籤的 src 屬性， 但是檔案驗證方有空字符注入的漏洞。
XSS_QUOTES_AND_WITH_HTML_ESCAPE_PLUS_FILTERING_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=Url 參數出現 HTML 跳脫, 並在檔案白名單中被驗證之後插入引號中並放入圖片標籤的 src 屬性。

## Html Tag Injection
XSS_HTML_TAG_INJECTION=Html 標籤衍生的 XSS 攻擊。
XSS_DIRECT_INPUT_DIV_TAG=Html 標籤被直接植入 div 標籤裡。

### Attack vectors
XSS_DIRECT_INPUT_DIV_TAG=Url 參數被直接加進 div 標籤裡。
XSS_DIRECT_INPUT_DIV_TAG_AFTER_REMOVING_VALUES_CONTAINING_ANCHOR_SCRIPT_AND_IMG_TAG=沒有編碼或圖片與錨標籤的 Url 參數被直接加進 div 標籤裡。
XSS_DIRECT_INPUT_DIV_TAG_AFTER_REMOVING_VALUES_CONTAINING_ANCHOR_SCRIPT_IMG_TAG_AND_ALERT_KEYWORD=沒有編碼或圖片、錨標籤、Javascript、警示關鍵字的 Url 參數被直接加進 div 標籤裡。

# URL Redirection
## Location Header Injection
OPEN_REDIRECTION_VULNERABILITY_3XX_BASED=當程式以不安全的方式在一個重新導向標的包含使用者可以控制的數據 \
就會出現開放式重新導向的漏洞<br/> 攻擊者可以在程式中建構一個URL \
來重新導向到任何一個外在的網域。這一個行為可以被用來促成針對該程式使用者的釣魚式攻擊。<br/> \
這個可以使用真正程式的URL跟有效的SSL認證（如果有使用到SSL的話）來鎖定正確的網域的能力，會借用可信度給 \
該釣魚式攻擊，因為很多的使用者，即使他們驗證過這些功能了，並不會注意到隨後的重新導向到不同的網域。 \
<br/><br/> <a href="https://www.w3.org/Protocols/rfc2616/rfc2616.html">RFC 2616 - "Hypertext Transfer Protocol - HTTP/1.1" target="_blank"</a> 定義了多達 \
3xx 多種會導致瀏覽器重新導向到一個特定區域的狀態碼，而這一個執行檔是以 3xx 多個狀態碼為根據 <br/><br/>\
重要的連結：<ol>\
 <li><a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse" target="_blank">WASC-38</a><br/></li>\
 <li><a href="https://cwe.mitre.org/data/definitions/601.html" target="_blank">CWE-601</a><br/></li>\
 <li><a href="https://portswigger.net/kb/issues/00500100_open-redirection-reflected" target="_blank">Port Swigger's vulnerability documentation</a><br/></li>\
 <li><a href="https://en.wikipedia.org/wiki/URL_redirection" target="_blank">Wiki link for describing the purpose of URL Redirection</a></li>\
 <li><a href="https://github.com/payloadbox/open-redirect-payload-list" target="_blank">Open Redirection payload list</a></li>\
 <li><a href="https://appsec-labs.com/portal/case-study-open-redirect/" target="_blank">Adding domain as prefix case study</a></li>\
 </ol>\
 秘思: <a href="https://security.stackexchange.com/questions/59517/are-url-shorteners-vulnerable-due-to-open-redirects" target="_blank">Are URL shorteners \u201Cvulnerable\u201D due to open redirects?</a><br/>

OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER=\"returnTo\" 查詢參數值直接被加在 \"Location\" 的標頭上。
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_WWW_OR_DOMAIN_IS_SAME=\"returnTo\" 查詢參數值的開頭如果不是\"http\",\"www\" 跟 \"https\"，或網域跟程式相同的話，會直接被加在  \"Location\" 的標頭上。
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_WWW_//_OR_DOMAIN_IS_SAME=\"returnTo\" 查詢參數值的開頭如果不是\"http\",\"www\" 跟 \"https\"，"//" 與且網域跟程式相同的話，會直接被加在\"Location\" 的標頭上。
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_WWW_HTTPS_//_NULL_BYTE_OR_DOMAIN_IS_SAME=\"returnTo\" 查詢參數值的開頭如果不是 \"http\",\"www\" 跟 \"https\"，"//" 與空字符 或網域跟程式相同的話，會直接被加在\"Location\" 的標頭上。
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADD_TO_LOCATION_HEADER_IF_NOT_HTTP_HTTPS_//_WWW_%_OR_DOMAIN_IS_SAME=\"returnTo\" 查詢參數值的開頭如果不是\"http\",\"www\" 跟 \"https\"，"//" 與小於ascii值33的字符，或網域跟程式相同的話，直接被加在 \"Location\" 的標頭上。
OPEN_REDIRECT_QUERY_PARAM_DIRECTLY_ADDED_TO_LOCATION_HEADER_BY_ADDING_DOMAIN_AS_PREFIX=\"returnTo\" 查詢參數值會以在前端加上程式網域名的形式直接被加在 \"Location\" 的標頭上。


## Meta Tag based URL Redirection
OPEN_REDIRECTION_VULNERABILITY_META_TAG_BASED=當應用程式以不安全的方法將使用者可以控制 \
的數據結合到重新導向的目的地就會出現開放式重新導向的漏洞<br/>一個攻擊者可以可以在應用程式內建構一個URL \
然後重新導向到一個隨意的外在網域。這個行為可以用來對應用程式的使用者進行釣魚攻擊。<br/> \
使用真實的應用程式 URL，以有效的 SSL 認證（如果有用到 SSL 的話）來針對正確的網域的行為，將會借給 \
釣魚攻擊更多的可信度，因為很多使用者即使有驗證過這些功能，還是不會注意到隨後的到不同網域的重新導向。 \
<br/><br/> 一個 HTML 的 meta 元素會說明瀏覽器將在幾秒內更新網頁。 \
提供一個另外的 URI 可以讓這個元素被當做定時的 URL 重新導向器。 \
比方說，在下面的這個範例，瀏覽器會在五秒內重新導向到 example.com：<br/> \
          &lt;meta http-equiv=&quot;refresh&quot; content=&quot;5;url=http://example.com&quot;&gt; <br/><br/>\
重要連結:<ol>\
 <li><a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse" target="_blank">WASC-38</a><br/></li>\
 <li><a href="https://cwe.mitre.org/data/definitions/601.html" target="_blank">CWE-601</a><br/></li>\
 <li><a href="https://portswigger.net/kb/issues/00500100_open-redirection-reflected" target="_blank">Port Swigger's vulnerability documentation</a><br/></li>\
 <li><a href="https://en.wikipedia.org/wiki/URL_redirection" target="_blank">Wiki link for describing the purpose of URL Redirection</a></li>\
 <li><a href="https://github.com/payloadbox/open-redirect-payload-list" target="_blank">Open Redirection payload list</a></li>\
 <li><a href="https://appsec-labs.com/portal/case-study-open-redirect/" target="_blank">Adding domain as prefix case study</a></li>\
 </ol>\
 秘思: <a href="https://security.stackexchange.com/questions/59517/are-url-shorteners-vulnerable-due-to-open-redirects" target="_blank">Are URL shorteners \u201Cvulnerable\u201D due to open redirects?</a><br/>


URL_REDIRECTION_META_TAG_BASED_INJECTION=Meta 標籤衍生的 Url 重新導向。
URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_META_TAG=Url 參數值被直接加到 Meta 標籤上。



# UNRESTRICTED_FILE_UPLOAD_VULNERABILITY
UNRESTRICTED_FILE_UPLOAD_VULNERABILITY=上傳的檔案對應用程式構成重大的風險。眾多的攻擊的第一步是讓程式碼進入要攻擊的系統。然後他們只要想辦法執行程式碼。\
<br/>不受限的上傳檔案會導致不同的結果，其中包含整個系統的接管，超載的檔案系統或資料庫，轉發攻擊到後端系統，客戶端的攻擊，或單純的損毀。這通常取決於該應用程式如何處理上傳的檔案，特別是他會被存在哪裡。\
<br/><br/>\
重要連結:<br/>\
<ol> <li> <a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload" target="_blank">Owasp Wiki Link</a>  \
 <li> <a href="https://www.youtube.com/watch?v=CmF9sEyKZNo" target="_blank">Ebrahim Hegazy talk on Unrestricted File Uploads</a> \
 <li> <a href="https://www.sans.org/blog/8-basic-rules-to-implement-secure-file-uploads/" target="_blank">Sans rules to implement secure file uploads</a> \
</ol>

#### Attack Vector Description
UNRESTRICTED_FILE_UPLOAD_NO_VALIDATION_FILE_NAME=對上傳檔案的檔名沒有驗證。
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_FILE_EXTENSION=除了 .html 以外的副檔名都是被允許的。
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_NOT_HTM_FILE_EXTENSION=除了 .html 與 .htm 以外的副檔名都是被允許的。
UNRESTRICTED_FILE_UPLOAD_IF_NOT_HTML_NOT_HTM_FILE_EXTENSION_CASE_INSENSITIVE=除了不分大小寫的 .html 與 .htm 以外的副檔名都是被允許的。
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_CONTAINS_.PNG_OR_.JPEG_CASE_INSENSITIVE=只有含有不分大小寫的 .jpeg 或 .png 的檔名是被允許的。
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_ENDS_WITH_.PNG_OR_.JPEG_CASE_INSENSITIVE_AND_FILE_NAMES_CONSIDERED_BEFORE_NULL_BYTE=只有以不分大小寫的 .jpeg 或 .png 結尾，而且被認為是只有在空字元前的檔名是被允許的。
UNRESTRICTED_FILE_UPLOAD_IF_FILE_NAME_NOT_ENDS_WITH_.PNG_OR_.JPEG_CASE_INSENSITIVE=只有以不分大小寫的 .jpeg 或 .png 結尾的檔名是被允許的。


# XXE Vulnerability
XXE_VULNERABILITY= XML 外部實體攻擊是為一種對於 \
解析 XML 輸入的應用程式的的的攻擊。 當設定比較弱的 XML 解析器去處理 \
一個包含有涉及外在實體內容的 XML 輸入這個攻擊就會發生。 \
這個攻擊可能會造成機密數據的外洩，服務被拒絕， \
偽造伺服器端的要求，從分析器所在位置的機器的角度對於端口的掃描， \
以及其他系統上的影響。\
<br/><br/>\
重要連結:<br/>\
<ol> <li> <a href="https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing" target="_blank">Owasp Wiki Link</a>  \
 <li> <a href="https://www.youtube.com/watch?v=DREgLWZqMWg" target="_blank">HackHappy's video tutorial</a> \
 <li> <a href="https://medium.com/@onehackman/exploiting-xml-external-entity-xxe-injections-b0e3eac388f9" target="_blank">Medium article by OneHackMan</a>\
 <li> <a href="https://portswigger.net/web-security/xxe" target="_blank">Portswigger XXE documentation</a> \
 <li> <a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.md1" target="_blank">Owasp Prevention cheat sheet</a>\
</ol>
#### Attack Vector Description
XXE_NO_VALIDATION=對於被置入請求本身的 XML 沒有任何的驗證。
XXE_DISABLE_GENERAL_ENTITY=分析器無法處理一般的外部實體。
XXE_DISABLE_GENERAL_AND_PARAMETER_ENTITY=分析器無法處理一般的以及參數實體。

# Path Traversal Attack
PATH_TRAVERSAL_VULNERABILITY=利用驗證／過濾使用者提供的輸入檔名的不足而構成的目錄漫遊（或途徑漫遊）， \
比方說有代表「遊歷到主目錄」的字眼被置入到檔案的 API 裡。 \
<br/><br/>\
這個攻擊的目標是要利用被影響的應用程式來在未被授權的情況下取得檔案系統。 <br/><br/>\
重要連結：<br/>\
<ol> <li> <a href="https://en.wikipedia.org/wiki/Directory_traversal_attack" target="_blank">Wiki Link</a>  \
 <li> <a href="https://owasp.org/www-community/attacks/Path_Traversal" target="_blank">Owasp Wiki Link</a> \
</ol>

#### AttackVector description
PATH_TRAVERSAL_URL_PARAM_DIRECTLY_INJECTED=\"fileName\" 查詢參數值被直接加在讀取檔案的路徑尾端上。
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" 查詢參數值如果沒有包含「..」就會被直接加在尾端上。
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_OR_%2F_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" 查詢參數值如果沒有包含「..」或「%2f」（ URL 的「/」編碼）就會被直接加在尾端上。
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_OR_%2F_CASE_INSENSITIVE_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" 查詢參數值如果沒有包含「..」或「%2f」，或「%2F」（URL的「/」編碼）就會被直接加在尾端上。
PATH_TRAVERSAL_URL_PARAM_IF_DOT_DOT_PATH_WITH_OR_WITHOUT_URL_ENCODING_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" 查詢參數值如果沒有包含「..」就會被直接加在尾端上，這也一併處理了 URL 編碼。

PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_DIRECTLY_INJECTED=\"fileName\" 查詢參數在空字元前的值被直接加在讀取檔案的路徑尾端上
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_PARENT_DIRECTORY_PATH_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" 查詢參數在空字元前的值如果不包含「../」會被直接加在尾端上。
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" 查詢參數在空字元前的值如果不包含「..」會被直接加在尾端上。
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_OR_%2F_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" 查詢參數在空字元前的值如果不包含「..」或「%2f」（URL的「/」編碼）會被直接加在尾端上。
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_OR_%2F_CASE_INSENSITIVE_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" 查詢參數在空字元前的值如果不包含「..」，「%2f」，或「%2F」（URL的「/」編碼）會被直接加在尾端上。
PATH_TRAVERSAL_URL_PARAM_BEFORE_NULL_BYTE_IF_DOT_DOT_PATH_WITH_OR_WITHOUT_URL_ENCODING_NOT_PRESENT_DIRECTLY_INJECTED=\"fileName\" 查詢參數在空字元前的值如果沒有包含「..」就會被直接加在尾端上，這也一併處理了 URL 編碼。


# Command Injection Attack
COMMAND_INJECTION_VULNERABILITY=指令輸入是透過一個有漏洞的應用程式對主人操作系統執行隨意的 \
指令為目的的攻擊。指令注入攻擊會在一個應用程式讓不安全的使用者提供的數據資料（表單，cookies，HTTP頭字段等） \
通過系統殼層時發生。在這個攻擊下，攻擊者提供的操作系統指令通常在這個有漏洞的的應用程式的權限下被執行。 \
指令輸入攻擊大都在輸入資料驗證不足的情況下發生。 <br/><br/>\
指令輸入漏洞的重要連結 :<br/>\
<ol> <li> <a href="https://cwe.mitre.org/data/definitions/77.html" target="_blank">CWE-77</a>  \
 <li> <a href="https://owasp.org/www-community/attacks/Command_Injection" target="_blank">Owasp Wiki Link</a> \
</ol>

#### Attack vectors
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED=\"ipaddress\" 查詢參數值被直接執行。
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_NOT_PRESENT=\"ipaddress\" 查詢參數值若不包含\";\"， \"&\"或空白符號的話就會被直接執行。
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_NOT_PRESENT=\"ipaddress\" 查詢參數值若不包含\";\"， \"&\"， \"%26\"， \"%3B\"或空白符號的話就會被直接執行。
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_CASE_INSENSITIVE_NOT_PRESENT=\"ipaddress\" 查詢參數值若不包含\";\"， \"&\"， \"%26\"， \"%3B\"， \"%3b\" 或空白符號的話就會被直接執行。
COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_%7C_CASE_INSENSITIVE_NOT_PRESENT=\"ipaddress\" 查詢參數值若不包含\";\"， \"&\"， \"%26\"， \"%3B\"， \"%3b\"， \"%7C\"， \"%7c\" 或空白符號的話就會被直接執行。


# Local File Injection
#URL_BASED_LFI_INJECTION=Url 衍生的本機檔案注入攻擊。
#LFI_URL_PARAM_BASED_DIRECT_INJECTION=Url 參數 \"fileName\" 被直接通過而來包含檔案。
#LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE=Url 參數 \"fileName\" 被驗證過並通過來包含檔案。

# Local File Injection with Null Byte
#URL_WITH_NULL_BYTE_BASED_LFI_INJECTION=含有空字元注入相衍生的本機檔案注入攻擊的 Url 。
#LFI_URL_PARAM_AND_NULL_BYTE_BASED_DIRECT_INJECTION=Url 參數 \"fileName\" 如果包含空字元的話會被直接通過來包含檔案。
#LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE=Url 參數 \"fileName\" 被驗證過並通過來包含檔案。

# Remote File Injection
URL_BASED_RFI_INJECTION=Url 衍生的本機檔案注入攻擊。

# JWT Injection
JWT_INJECTION_VULNERABILITY=JSON Web Token (JWT) 是一個開放標準（RFC 7519），他定義了一個精縮且獨立的方法 \
來安全的在不同對象之間以 JSON 物件的形式來傳送資訊。這個資訊因為經過數位簽署而可以被驗證及信賴。 \
很多事情在執行 JWT 時可以出錯而影響該應用程式的驗證及授權， \
而導致系統全面的出錯。 <br/><br/> JWT 的重要連結 : \
<ol> <li> <a href="https://en.wikipedia.org/wiki/JSON_Web_Token" target="_blank">Wiki Link</a>  \
 <li> <a href="https://jwt.io/introduction/" target="_blank">Jwt.io</a> \
 </ol> Important Links on Vulnerable implementations in JWT : \
 <ol> \ <li><a href="https://tools.ietf.org/html/draft-ietf-oauth-jwt-bcp-06" target="_blank">JSON Web Token Best \
      Current Practices(ieft document)</a> \
   <li><a \
       href="https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html" target="_blank"> \
       OWASP cheatsheet for vulnerabilities in JWT implementation </a> \
   <li><a href="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries" target="_blank">For \
       server side vulnerabilities in JWT implementations</a> \
 </ol>

#### AttackVector description
JWT_URL_EXPOSING_SECURE_INFORMATION=請求本身含有自 URL 洩漏的 JWT token 。這可以違反 PCI 以及大部分企業組織的規定與條款。
COOKIE_CONTAINING_JWT_TOKEN_SECURITY_ATTRIBUTES_MISSING=Cookie 衍生的 JWT token 但少了 Secure/HttpOnly 警示旗以及少了 cookie 接頭辭。
COOKIE_WITH_HTTPONLY_WITHOUT_SECURE_FLAG_BASED_JWT_VULNERABILITY=Cookie 衍生的 JWT token 有 HttpOnly flag 但少了 Secure 警示旗以及少了 cookie 接頭辭。
COOKIE_BASED_LOW_KEY_STRENGTH_JWT_VULNERABILITY=Cookie 衍生的 JWT token 被以脆弱的金鑰來簽署產生的漏洞。
COOKIE_BASED_NULL_BYTE_JWT_VULNERABILITY=Cookie 衍生的空字元的脆弱 JWT token 驗證器。
COOKIE_BASED_NONE_ALGORITHM_JWT_VULNERABILITY=Cookie 衍生的非演算法的脆弱 JWT token 驗證器。
COOKIE_BASED_KEY_CONFUSION_JWT_VULNERABILITY=Cookie 衍生的含有混淆金鑰漏洞的 JWT token 。
COOKIE_BASED_FOR_JWK_HEADER_BASED_JWT_VULNERABILITY=Cookie 衍生的 JWT token 驗證器對信賴的 JWK 領域沒有查明提供的公開金鑰加密是不是有在信任庫裡而產生漏洞。
COOKIE_BASED_EMPTY_TOKEN_JWT_VULNERABILITY=Cookie 衍生的 JWT token 對空的 token 漏洞攻擊較沒有防禦力。



# SQL Injection Vulnerability
SQL_INJECTION_VULNERABILITY=一個包含利用從客戶端輸入到系統的資訊來插入或注入結構化查詢語言（SQL）查詢的 \
SQL 注入攻擊。一個成功的 SQL 注入與取用可以從資料庫讀取敏感的資訊，改變資料庫的資料（插入／更新／刪除）， \
對資料庫執行管理層級的操作（例如關閉 DBMS ），還原一個已經存在於 DBMS 檔案系統 \
的檔案內容，在有些情況下發佈指令到操作系統。 SQL 注入攻擊是一種注入攻擊， \
在這裡 SQL 指令被注入到資料層的輸入來影響原先預定的 SQL 指令的執行。 <br\> \
SQL 注入的重要連結 : \
<ol> <li> <a href="https://en.wikipedia.org/wiki/SQL_injection" target="_blank">Wiki Link</a>  \
 <li> <a href="https://owasp.org/www-community/attacks/SQL_Injection" target="_blank">Owasp SQLInjection</a> \
 <li> <a href="https://www.youtube.com/watch?v=WkHkryIoLD0" target="_blank">Joe McCray talk on SQLInjection</a>\
 <li> <a href="https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/" target="_blank">SQL Injection cheat sheet by netsparker</a>\
 </ol> <br/><br/>\ Important Links on Prevention techniques : \
 <ol> \ <li><a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html" target="_blank">Owasp Prevention cheatsheet</a> \
   <li><a \
       href="https://www.websec.ca/kb/sql_injection" target="_blank"> \
       SQL Injection knowledge base </a> \
 </ol>

#### AttackVector description
ERROR_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=查詢參數被直接加到 SQL 查詢的尾端，造成特定狀況下的例外 \
導致暴露了應用程式的資料。
ERROR_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=查詢參數被包在「'」裡面之後接到 SQL 查詢的尾端，造成特定狀況下的例外 \
導致暴露了應用程式的資料。
ERROR_SQL_INJECTION_URL_PARAM_REMOVES_SINGLE_QUOTE_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=單引號被從查詢參數裡移除然後被包在「'」裡面並接到 SQL 查詢的尾端。
ERROR_SQL_INJECTION_URL_PARAM_APPENDED_TO_PARAMETERIZED_QUERY=查詢參數被直接加到 SQL 查詢的尾端，接著一個參數化的查詢被產生。這是要來強調 \
適當的使用 PreparedStatement 是非常重要的。
 
UNION_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=查詢參數被直接加到查詢的尾端導致 \"Union\" 關鍵字被用來湊成查詢結果 \
以及取出應用程式資料。
UNION_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=查詢參數被包在「'」裡面之後接到查詢的尾端導致 \"Union\" 關鍵字被用來湊成查詢結果 \
以及取出應用程式資料。
UNION_SQL_INJECTION_URL_PARAM_REMOVES_SINGLE_QUOTE_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=單引號被從查詢參數裡移除然後被包在「'」裡並接到 SQL 查詢的尾端\
導致 \"Union\" 關鍵字被用來湊成查詢結果以及取出應用程式資料。

BLIND_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY=查詢參數被直接加到查詢的尾端導致查詢可以被篡改。
BLIND_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY=查詢參數被包在「'」裡並接到 SQL 查詢的尾端導致查詢可以被篡改。


#### SSRF Vulnerability
SSRF_VULNERABILITY=在一個伺服器端請求偽造 （SSRF）攻擊裡，攻擊者可以濫用伺服器上功能去 \
讀取或更新內部的資源。攻擊者可以提供或修改一個讓在伺服器上跑的程式碼讀取或提供資料的<strong>URL</strong> ， \
而藉由小心的選擇 URLs，<strong>攻擊者可能有辦法讀取伺服器 </strong> \
設定，像是 AWS 後設資料，連結到內部服務，例如由 http 啟動的資料庫，或執行向內部服務 \
做 post 請求，這些都是不應該被曝光的。 \
SSRF 的重要連結 : \
<ol> \
 <li> <a href="https://en.wikipedia.org/wiki/Server-side_request_forgery" target="_blank">Wiki Link</a>  \
 <li> <a href="https://owasp.org/www-community/attacks/Server_Side_Request_Forgery" target="_blank">Owasp SSRF</a> \
 <li> <a href="https://www.youtube.com/watch?v=AsPpxqIlTDU" target="_blank">SSRF (Server Side Request Forgery) by Musab Khan</a>\
 </ol> 
SSRF_VULNERABILITY_URL_WITHOUT_CHECK=對於提供的 URL 沒有做驗證。
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL=file:// 協定不允許被使用在提供的 URL 上。
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL_AND_169.254.169.254=file:// 協定以及對內部後設資料服務 IP 169.254.169.254 的存取權不被允許。
SSRF_VULNERABILITY_URL_IF_NOT_FILE_PROTOCOL_AND_INTERNAL_METADATA_URL=file:// 協定以及對內部後設資料服務的存取權不被允許。
SSRF_VULNERABILITY_URL_ONLY_IF_IN_THE_WHITELIST=只有被列入白名單的 URL 是被允許的。